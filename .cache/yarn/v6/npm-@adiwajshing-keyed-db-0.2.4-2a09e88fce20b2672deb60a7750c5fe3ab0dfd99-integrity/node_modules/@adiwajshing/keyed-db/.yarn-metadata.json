{
  "manifest": {
    "name": "@adiwajshing/keyed-db",
    "version": "0.2.4",
    "description": "Lightweight library to store an in-memory DB",
    "homepage": "https://github.com/adiwajshing/keyed-db",
    "main": "lib/KeyedDB.js",
    "types": "lib/KeyedDB.d.ts",
    "keywords": [
      "db",
      "key"
    ],
    "scripts": {
      "prepack": "npm run build",
      "test": "mocha --timeout 60000 -r ts-node/register src/Tests.ts",
      "build": "tsc"
    },
    "author": {
      "name": "Adhiraj Singh"
    },
    "license": "MIT",
    "repository": {
      "url": "git@github.com:adiwajshing/keyed-db.git"
    },
    "files": [
      "lib/*"
    ],
    "dependencies": {},
    "devDependencies": {
      "@types/mocha": "5.2.7",
      "@types/node": "^14.0.14",
      "assert": "^2.0.0",
      "mocha": "^8.0.1",
      "ts-node-dev": "^1.0.0-pre.61",
      "typescript": "^4.0.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-@adiwajshing-keyed-db-0.2.4-2a09e88fce20b2672deb60a7750c5fe3ab0dfd99-integrity/node_modules/@adiwajshing/keyed-db/package.json",
    "readmeFilename": "README.md",
    "readme": "# Keyed DB\n\nA light-weight node library to manage a sorted & indexed collection with pagination support. \nAll done using Binary Search. Based off my swift code for [Queenfisher](https://github.com/adiwajshing/Queenfisher)\n\n## Install\n\n`npm i github:adiwajshing/keyed-db`\n\n## Running Tests\n\n`npm test`\n\n## Functions\n\n``` ts\n\ndb = new KeyedDB<T> (t => t.uniqueNumberKeyProperty, t => t.optionalUniqueIDProperty)\n// compare with a custom function\ndb = new KeyedDB<T> ({  \n    key: t => t.someProperty,\n    compare: (t1, t2) => someComputation(t1, t2) // return -1 if t1 < t2, 0 if t1=t2 & 1 if t1 > t2\n}, t => t.optionalUniqueIDProperty)\n\ndb.insert (value) // insert value in DB\ndb.upsert (value) // upserts value\ndb.insertIfAbsent (value) // only inserts if not already present in DB\ndb.delete (value) // delete value\ndb.deleteById (value.optionalUniqueIDProperty) // delete value by referencing the ID\n// update the key of a value, \n// will automatically place object after key change\ndb.updateKey (value, value => value.uniqueKeyProperty = newValue) \ndb.paginated (someCursor, 20) // get X results after the given cursor (null for the first X results)\n\n```\n\n## Usage\n\n``` ts\nimport KeyedDB from '@adiwajshing/keyed-db'\n\n// Let's use the db to sort & maintain a list of chats\n// Chats must be accessed quickly via the chatID (the person you're chatting with)\n// Chats must be sorted by recency\ntype Chat = {\n    timestamp: Date\n    chatID: string\n}\n\n// first argument -- sorting property, second argument -- ID property\nconst db = new KeyedDB<Chat>(value => value.timestamp.getTime()*-1, value => value.chatID)\n\nfor (let i = 0; i < 1000;i++) {\n    // insert data\n    db.insert (\n        {\n            timestamp: new Date( new Date().getTime() - Math.random()*10000 ), \n            chatID: `person ${i}`\n        }\n    )\n}\nconsole.log (db.all()) // return internal sorted array\nconsole.log (db.paginated(null, 20)) // return first 20 chats\nconsole.log (db.paginated(null, 20, null, 'before')) // return last 20 chats\nconsole.log (db.paginated(null, 20, chat => chat.chatID.includes('something'))) // return first 20 chats where the chatID contains 'something'\n\nconst someDate = new Date().getTime()\nconst cursorPaginated = db.paginated(someDate, 20)\nconsole.log (cursorPaginated) // return 20 chats after the specified date\n\ndb.delete (cursorPaginated[0]) // delete paginated chats \n\n// update chat timestamp\ndb.updateKey(cursorPaginated[1], value => value.timestamp = new Date().getTime()) \n\n```\n\n## Time Complexity\n\n| Operation      | Time Complexity |\n|----------------|-----------------|\n| db.insert()    | O(logN)         |\n| db.delete()    | O(logN)         |\n| db.get()       | O(1)            |\n| db.updateKey() | O(logN)         |",
    "licenseText": "MIT License\n\nCopyright (c) 2020 Adhiraj\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@adiwajshing/keyed-db/-/keyed-db-0.2.4.tgz#2a09e88fce20b2672deb60a7750c5fe3ab0dfd99",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@adiwajshing/keyed-db/-/keyed-db-0.2.4.tgz",
    "hash": "2a09e88fce20b2672deb60a7750c5fe3ab0dfd99",
    "integrity": "sha512-yprSnAtj80/VKuDqRcFFLDYltoNV8tChNwFfIgcf6PGD4sjzWIBgs08pRuTqGH5mk5wgL6PBRSsMCZqtZwzFEw==",
    "registry": "npm",
    "packageName": "@adiwajshing/keyed-db",
    "cacheIntegrity": "sha512-yprSnAtj80/VKuDqRcFFLDYltoNV8tChNwFfIgcf6PGD4sjzWIBgs08pRuTqGH5mk5wgL6PBRSsMCZqtZwzFEw== sha1-Kgnoj84gsmct62CndQxf46sN/Zk="
  },
  "registry": "npm",
  "hash": "2a09e88fce20b2672deb60a7750c5fe3ab0dfd99"
}