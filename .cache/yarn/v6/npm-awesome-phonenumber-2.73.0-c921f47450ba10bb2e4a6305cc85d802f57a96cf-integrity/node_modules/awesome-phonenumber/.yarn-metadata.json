{
  "manifest": {
    "name": "awesome-phonenumber",
    "description": "Google's libphonenumber pre-compiled with the closure compiler",
    "license": "MIT",
    "version": "2.73.0",
    "author": {
      "name": "Gustaf Räntilä",
      "email": "g.rantila@gmail.com"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/grantila/awesome-phonenumber.git"
    },
    "engines": {
      "node": ">=12"
    },
    "main": "./index.js",
    "types": "./index.d.ts",
    "scripts": {
      "build:libphonenumber": "node_modules/.bin/gulp",
      "build:rewrite": "ts-node scripts/rewrite.ts",
      "build": "yarn build:libphonenumber && yarn build:rewrite",
      "test": "scripts/test.sh",
      "cz": "git-cz",
      "semantic-release": "semantic-release"
    },
    "pre-commit": [
      "test"
    ],
    "files": [
      "lib",
      "index.js",
      "index.d.ts"
    ],
    "keywords": [
      "libphonenumber",
      "phonenumber",
      "phone",
      "number",
      "closure",
      "web",
      "browser",
      "browserify",
      "awesome"
    ],
    "devDependencies": {
      "@types/mkdirp": "^1.0.1",
      "@types/mocha": "8.2.2",
      "@types/node": "^16.11.12",
      "chai": "4.3.4",
      "commitizen": "^4.2.4",
      "cz-conventional-changelog": "^3.3.0",
      "google-closure-compiler": "20210907.0.0",
      "google-closure-library": "^20210808.0.0",
      "gulp": "4.0.2",
      "mkdirp": "1.0.4",
      "mocha": "8.4.0",
      "pre-commit": "1.x",
      "replace": "1.2.1",
      "rimraf-promise": "2.x",
      "ts-node": "^10.4.0",
      "typescript": "^4.2.4"
    },
    "config": {
      "commitizen": {
        "path": "./node_modules/cz-conventional-changelog"
      }
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-awesome-phonenumber-2.73.0-c921f47450ba10bb2e4a6305cc85d802f57a96cf-integrity/node_modules/awesome-phonenumber/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm version][npm-image]][npm-url]\n[![downloads][downloads-image]][npm-url]\n[![build status][build-image]][build-url]\n[![Language grade: JavaScript][lgtm-image]][lgtm-url]\n[![Install size][packagephobia-image]][packagephobia-url]\n\n\n# Awesome phonenumber parser\n\nThis library is a pre-compiled version of Google's `libphonenumber`, with a slightly simpler interface. It has a minimal footprint - is by far the smallest libphonenumber-based library available on npmjs, and has no dependencies.\n\nTypeScript typings are provided within the package.\n\nUses libphonenumber v8.12.48\n\n## Comparison with other libraries\n\nSince this library is pre-compiled, it doesn't depend on the closure compiler, and needs not load it on start. This makes the library faster and saves you a lot of space. It also means this library is trivial to use in any `webpack` project (or using any other means to run in the browser).\n\nAmong all the popular phone number using Google's `libphonenumber` (or mimicing it), only this one, `google-libphonenumber` and `libphonenumber-js` have decent README's with examples. *This may have changed since first doing these benchmarks*.\n\nA library should be quick to load (`require()`), quick to parse first time and all consecutive times. It shouldn't bloat your `node_modules`, and it should have a small memory footprint, if possible.\n\nThe following is the result of a test program which loads the library, then parses a phone number, and then once again. It's called 100 times for each library and the mean values are shown here. Parsing a phone number first time might be slower because of initially compiling/optimizing regular expressions and whatnot. Parsing a phone number a second time will show the speed of likely all future parsing within that process.\n\nAction                    | awesome-phonenumber<br/>2.56.0<br/>(lib 8.12.29) | google-libphonenumber<br/>3.2.22<br/>(lib 8.12.27) | libphonenumber-js<br/>1.9.23<br/>(lib -)\n------------------------- | ------------------- | --------------------- | ----------------\nLoad library first time         | 11.0 ms ✅          | 29.67 ms              | 32.87 ms\nParse first phone number        | 4.3 ms              | 4.01 ms               | 3.43 ms ✅\n**⇒ Load + parse first number** | 15.3 ms ✅          | 33.68 ms              | 36.3 ms\nParse second phone number       | 0.78 ms ✅          | 0.97 ms               | 0.92 ms\nIncreased memory usage          | 5.12 M ✅           | 9.99 M                | 5.86 M\nnode_modules size               | 296 K ✅            | 600 K                 | 7.6 M\nnode_modules files              | 8                   | 7 ✅                  | 653\n\n\n## Basic usage\n```js\nvar PhoneNumber = require( 'awesome-phonenumber' );\n\nvar pn = new PhoneNumber( '0707123456', 'SE' );\npn.isValid( );  // -> true\npn.isMobile( ); // -> true\npn.canBeInternationallyDialled( ); // -> true\npn.getNumber( );                   // -> '+46707123456'\npn.getNumber( 'e164' );            // -> '+46707123456' (default)\npn.getNumber( 'international' );   // -> '+46 70 712 34 56'\npn.getNumber( 'national' );        // -> '070-712 34 56'\npn.getNumber( 'rfc3966' );         // -> 'tel:+46-70-712-34-56'\npn.getNumber( 'significant' );     // -> '707123456'\npn.getRegionCode( );               // -> 'SE'\npn.getCountryCode( );              // -> 46\n\npn.toJSON( );                  // -> json blob, so that:\nJSON.stringify( pn, null, 4 ); // -> This:\n// {\n//     \"canBeInternationallyDialled\": true,\n//     \"number\": {\n//         \"input\": \"0707123456\",\n//         \"international\": \"+46 70 712 34 56\",\n//         \"national\": \"070-712 34 56\",\n//         \"e164\": \"+46707123456\",\n//         \"rfc3966\": \"tel:+46-70-712-34-56\",\n//         \"significant\": \"707123456\"\n//     },\n//     \"regionCode\": \"SE\",\n//     \"valid\": true,\n//     \"possible\": true,\n//     \"type\": \"mobile\",\n//     \"possibility\": \"is-possible\"\n// }\n```\n\n### Detect country\n\nWhen constructed with a phone number on `e164` format (i.e. prefixed with a `+`), awesome-phonenumber will auto-detect the country:\n\n```js\nPhoneNumber( '+46707123456' ).getRegionCode( ); // -> 'SE'\n```\n\n## API types\n\nThe API consists of the `PhoneNumber` class which sometimes uses *enums*. These are:\n\n### <a name=\"phone-number-types\"></a>Phone number types\n```js\n'fixed-line'\n'fixed-line-or-mobile'\n'mobile'\n'pager'\n'personal-number'\n'premium-rate'\n'shared-cost'\n'toll-free'\n'uan'\n'voip'\n'unknown'\n```\n\n### Phone number possibilities\n\n```js\n'is-possible'\n'invalid-country-code'\n'too-long'\n'too-short'\n'unknown'\n```\n\n### Phone number formats\n\n```js\n'international'\n'national'\n'e164'\n'rfc3966'\n'significant'\n```\n\n## API functions\n\n### Library\n```js\nvar PhoneNumber = require( 'awesome-phonenumber' );\n```\n\n### Country codes\n\nThere are conversion functions between the 2-character ISO 3166-1 region codes (e.g. 'SE' for Sweden) and the corresponding country calling codes.\n\n```js\nPhoneNumber.getCountryCodeForRegionCode( regionCode );  // -> countryCode\nPhoneNumber.getRegionCodeForCountryCode( countryCode ); // -> regionCode\n```\n\n#### Example\n\n```js\nPhoneNumber.getCountryCodeForRegionCode( 'SE' ); // -> 46\nPhoneNumber.getRegionCodeForCountryCode( 46 );   // -> 'SE'\n```\n\n### Supported calling codes\n\n```js\nPhoneNumber.getSupportedCallingCodes( ); // -> [ calling codes... ]\n```\n\n### Supported region codes\n\n```js\nPhoneNumber.getSupportedRegionCodes( ); // -> [ region codes... ]\n```\n\n### Phone numbers\n\nAn instance of the `PhoneNumber` class will be created even if `PhoneNumber` is called as a function.\n\n```js\nvar pn = PhoneNumber( number, regionCode );\n// is the same as\nvar pn = new PhoneNumber( number, regionCode );\n```\n\nPhoneNumber objects can also be created using the `getExample( regionCode[, type ] )` function, see section [Example phone numbers for country](#example) below.\n\n```js\npn.toJSON( );               // -> json blob as seen in \"Basic usage\" above\npn.isValid( );              // -> Boolean\npn.isPossible( );           // -> Boolean\npn.getType( );              // -> Any of the \"Phone number types\" defined above\npn.isMobile( );             // -> true if type is 'mobile' or 'fixed-line-or-mobile'\npn.isFixedLine( );          // -> true if type is 'fixed-line' or 'fixed-line-or-mobile'\npn.getNumber( [ format ] ); // -> Formatted number, see \"Basic usage\" for examples\n\n// Returns the number formatted to how to dial it from another region.\npn.getNumberFrom( fromRegionCode );\n```\n\n#### Example\n\n```js\n// Calling the Swedish number 0707123456 from Japan:\nPhoneNumber( '0707123456', 'SE' ).getNumberFrom( 'JP' ); // '010 46 70 712 34 56'\n```\n\n### <a name=\"example\"></a>Example phone numbers for country\n\nSometimes you want to display a formatted example phone number for a certain country (and maybe also a certain type of phone number). The `getExample` function is used for this.\n\n```js\nPhoneNumber.getExample( regionCode[, phoneNumberType] ); // PhoneNumber object\n```\n\nThe `phoneNumberType` is any of the [types defined above](#phone-number-types).\n\n#### Example\n\n```js\nPhoneNumber.getExample( 'SE' ).getNumber( );                      // '+468123456'\nPhoneNumber.getExample( 'SE', 'mobile' ).getNumber( );            // '+46701234567'\nPhoneNumber.getExample( 'SE', 'mobile' ).getNumber( 'national' ); // '070 123 45 67'\n```\n\n### As-you-type formatting\n\nYou can use an `AsYouType` class to format a phone number as it is being typed. An instance of this class is retrieved by `var ayt = PhoneNumber.getAsYouType( regionCode )`, and has the following methods:\n\n```js\n// Add a character to the end of the number\nayt.addChar( nextChar );\n\n// Get the current formatted number\nayt.number( );\n\n// Remove the last character\nayt.removeChar( );\n\n// Replace the whole number with a new number (or an empty number if null)\nayt.reset( [ number ] );\n\n// Get a PhoneNumber object representing the current number\nayt.getPhoneNumber( );\n```\n\nAll the functions above except `getPhoneNumber( )` return the current formatted number (as a String of course, as it may include spaces and other characters).\n\n#### Example\n\n```js\nvar ayt = PhoneNumber.getAsYouType( 'SE' );\nayt.addChar( '0' ); // -> '0'\nayt.addChar( '7' ); // -> '07'\nayt.addChar( '0' ); // -> '070'\nayt.addChar( '7' ); // -> '070 7'\nayt.addChar( '1' ); // -> '070 71'\nayt.addChar( '2' ); // -> '070 712'\nayt.addChar( '3' ); // -> '070 712 3'\nayt.addChar( '4' ); // -> '070 712 34'\nayt.addChar( '5' ); // -> '070 712 34 5'\nayt.addChar( '6' ); // -> '070 712 34 56'\nayt.removeChar( );  // -> '070 712 34 5'\nayt.addChar( '7' ); // -> '070 712 34 57'\n```\n\n[npm-image]: https://img.shields.io/npm/v/awesome-phonenumber.svg\n[npm-url]: https://npmjs.org/package/awesome-phonenumber\n[downloads-image]: https://img.shields.io/npm/dm/awesome-phonenumber.svg\n[build-image]: https://img.shields.io/github/workflow/status/grantila/awesome-phonenumber/Master.svg\n[build-url]: https://github.com/grantila/awesome-phonenumber/actions?query=workflow%3AMaster\n[lgtm-image]: https://img.shields.io/lgtm/grade/javascript/g/grantila/awesome-phonenumber.svg?logo=lgtm&logoWidth=18\n[lgtm-url]: https://lgtm.com/projects/g/grantila/awesome-phonenumber/context:javascript\n[packagephobia-image]: https://packagephobia.now.sh/badge?p=awesome-phonenumber\n[packagephobia-url]: https://packagephobia.now.sh/result?p=awesome-phonenumber\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015 Gustaf Räntilä\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/awesome-phonenumber/-/awesome-phonenumber-2.73.0.tgz#c921f47450ba10bb2e4a6305cc85d802f57a96cf",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/awesome-phonenumber/-/awesome-phonenumber-2.73.0.tgz",
    "hash": "c921f47450ba10bb2e4a6305cc85d802f57a96cf",
    "integrity": "sha512-zirkzWFUheNnnPY1QE05PQd+5drn+5kVy76gZ3WyXnLwzXOguw6sqksyZGO1qyNnYj3Y/SDITXnS/TCk/hJXpQ==",
    "registry": "npm",
    "packageName": "awesome-phonenumber",
    "cacheIntegrity": "sha512-zirkzWFUheNnnPY1QE05PQd+5drn+5kVy76gZ3WyXnLwzXOguw6sqksyZGO1qyNnYj3Y/SDITXnS/TCk/hJXpQ== sha1-ySH0dFC6ELsuSmMFzIXYAvV6ls8="
  },
  "registry": "npm",
  "hash": "c921f47450ba10bb2e4a6305cc85d802f57a96cf"
}