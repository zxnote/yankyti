{
  "manifest": {
    "name": "command-line-args",
    "version": "5.2.1",
    "description": "A mature, feature-complete library to parse command-line options.",
    "repository": {
      "type": "git",
      "url": "https://github.com/75lb/command-line-args"
    },
    "scripts": {
      "test": "npm run dist && npm run test:js && npm run test:mjs",
      "test:js": "node dist/tests.js",
      "test:mjs": "node --experimental-modules test/tests.mjs",
      "test:ci": "npm run test:js",
      "docs": "jsdoc2md -c jsdoc.conf index.mjs > doc/API.md && jsdoc2md -c jsdoc.conf lib/option-definition.mjs > doc/option-definition.md",
      "cover": "nyc --reporter=text-lcov test-runner test/*.js test/internals/*.js | coveralls",
      "dist": "rollup index.mjs -f cjs -e 'lodash.camelcase' -o dist/index.js && rollup index.mjs -f esm -e 'lodash.camelcase' -o dist/index.mjs && rollup test/tests.mjs -f cjs -e 'test-runner,assert,lodash.camelcase' -o dist/tests.js"
    },
    "main": "dist/index.js",
    "keywords": [
      "argv",
      "parse",
      "argument",
      "args",
      "option",
      "options",
      "parser",
      "parsing",
      "cli",
      "command",
      "line"
    ],
    "author": {
      "name": "Lloyd Brookes",
      "email": "75pound@gmail.com"
    },
    "license": "MIT",
    "engines": {
      "node": ">=4.0.0"
    },
    "files": [
      "index.mjs",
      "lib",
      "dist/index.js",
      "dist/index.mjs"
    ],
    "devDependencies": {
      "coveralls": "^3.1.1",
      "jsdoc-to-markdown": "^7.1.1",
      "rollup": "~1.7.4",
      "test-runner": "^0.5.1"
    },
    "dependencies": {
      "array-back": "^3.1.0",
      "find-replace": "^3.0.0",
      "lodash.camelcase": "^4.3.0",
      "typical": "^4.0.0"
    },
    "standard": {
      "ignore": [
        "dist"
      ],
      "envs": []
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-command-line-args-5.2.1-c44c32e437a57d7c51157696893c5909e9cec42e-integrity/node_modules/command-line-args/package.json",
    "readmeFilename": "README.md",
    "readme": "[![view on npm](https://badgen.net/npm/v/command-line-args)](https://www.npmjs.org/package/command-line-args)\n[![npm module downloads](https://badgen.net/npm/dt/command-line-args)](https://www.npmjs.org/package/command-line-args)\n[![Gihub repo dependents](https://badgen.net/github/dependents-repo/75lb/command-line-args)](https://github.com/75lb/command-line-args/network/dependents?dependent_type=REPOSITORY)\n[![Gihub package dependents](https://badgen.net/github/dependents-pkg/75lb/command-line-args)](https://github.com/75lb/command-line-args/network/dependents?dependent_type=PACKAGE)\n[![Node.js CI](https://github.com/75lb/command-line-args/actions/workflows/node.js.yml/badge.svg)](https://github.com/75lb/command-line-args/actions/workflows/node.js.yml)\n[![Coverage Status](https://coveralls.io/repos/github/75lb/command-line-args/badge.svg)](https://coveralls.io/github/75lb/command-line-args)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](https://github.com/feross/standard)\n\n***Upgraders, please read the [release notes](https://github.com/75lb/command-line-args/releases)***\n\n# command-line-args\n\nA mature, feature-complete library to parse command-line options.\n\n## Synopsis\n\nYou can set options using the main notation standards ([learn more](https://github.com/75lb/command-line-args/wiki/Notation-rules)). These commands are all equivalent, setting the same values:\n```\n$ example --verbose --timeout=1000 --src one.js --src two.js\n$ example --verbose --timeout 1000 --src one.js two.js\n$ example -vt 1000 --src one.js two.js\n$ example -vt 1000 one.js two.js\n```\n\nTo access the values, first create a list of [option definitions](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md) describing the options your application accepts. The [`type`](https://github.com/75lb/command-line-args/blob/master/doc/option-definition.md#optiontype--function) property is a setter function (the value supplied is passed through this), giving you full control over the value received.\n\n```js\nconst optionDefinitions = [\n  { name: 'verbose', alias: 'v', type: Boolean },\n  { name: 'src', type: String, multiple: true, defaultOption: true },\n  { name: 'timeout', alias: 't', type: Number }\n]\n```\n\nNext, parse the options using [commandLineArgs()](https://github.com/75lb/command-line-args/blob/master/doc/API.md#commandlineargsoptiondefinitions-options--object-):\n```js\nconst commandLineArgs = require('command-line-args')\nconst options = commandLineArgs(optionDefinitions)\n```\n\n`options` now looks like this:\n```js\n{\n  src: [\n    'one.js',\n    'two.js'\n  ],\n  verbose: true,\n  timeout: 1000\n}\n```\n\n### Advanced usage\n\nBeside the above typical usage, you can configure command-line-args to accept more advanced syntax forms.\n\n* [Command-based syntax](https://github.com/75lb/command-line-args/wiki/Implement-command-parsing-(git-style)) (git style) in the form:\n\n  ```\n  $ executable <command> [options]\n  ```\n\n  For example.\n\n  ```\n  $ git commit --squash -m \"This is my commit message\"\n  ```\n\n* [Command and sub-command syntax](https://github.com/75lb/command-line-args/wiki/Implement-multiple-command-parsing-(docker-style)) (docker style) in the form:\n\n  ```\n  $ executable <command> [options] <sub-command> [options]\n  ```\n\n  For example.\n\n  ```\n  $ docker run --detached --image centos bash -c yum install -y httpd\n  ```\n\n## Usage guide generation\n\nA usage guide (typically printed when `--help` is set) can be generated using [command-line-usage](https://github.com/75lb/command-line-usage). See the examples below and [read the documentation](https://github.com/75lb/command-line-usage) for instructions how to create them.\n\nA typical usage guide example.\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/footer.png)\n\nThe [polymer-cli](https://github.com/Polymer/polymer-cli/) usage guide is a good real-life example.\n\n![usage](https://raw.githubusercontent.com/75lb/command-line-usage/master/example/screens/polymer.png)\n\n## Further Reading\n\nThere is plenty more to learn, please see [the wiki](https://github.com/75lb/command-line-args/wiki) for examples and documentation.\n\n## Install\n\n```sh\n$ npm install command-line-args --save\n```\n\n* * *\n\n&copy; 2014-22 Lloyd Brookes \\<75pound@gmail.com\\>. Documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-22 Lloyd Brookes <75pound@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/command-line-args/-/command-line-args-5.2.1.tgz#c44c32e437a57d7c51157696893c5909e9cec42e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/command-line-args/-/command-line-args-5.2.1.tgz",
    "hash": "c44c32e437a57d7c51157696893c5909e9cec42e",
    "integrity": "sha512-H4UfQhZyakIjC74I9d34fGYDwk3XpSr17QhEd0Q3I9Xq1CETHo4Hcuo87WyWHpAF1aSLjLRf5lD9ZGX2qStUvg==",
    "registry": "npm",
    "packageName": "command-line-args",
    "cacheIntegrity": "sha512-H4UfQhZyakIjC74I9d34fGYDwk3XpSr17QhEd0Q3I9Xq1CETHo4Hcuo87WyWHpAF1aSLjLRf5lD9ZGX2qStUvg== sha1-xEwy5DelfXxRFXaWiTxZCenOxC4="
  },
  "registry": "npm",
  "hash": "c44c32e437a57d7c51157696893c5909e9cec42e"
}