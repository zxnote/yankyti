{
  "manifest": {
    "name": "curve25519-js",
    "version": "0.0.4",
    "description": "Javascript implementation of Curve25519",
    "main": "lib/index.js",
    "scripts": {
      "build": "tsc",
      "format": "prettier --write \"src/**/*.ts\" \"src/**/*.js\"",
      "lint": "tslint -p tsconfig.json"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/harveyconnor/curve25519-js.git"
    },
    "author": {
      "name": "Harvey Connor",
      "email": "harvey@smartguide.com.au"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/harveyconnor/curve25519-js/issues"
    },
    "homepage": "https://github.com/harveyconnor/curve25519-js#readme",
    "keywords": [
      "sign",
      "curve25519",
      "x25519",
      "ed25519"
    ],
    "devDependencies": {
      "@types/node": "^12.6.9",
      "prettier": "^1.18.2",
      "tslint": "^5.18.0",
      "tslint-config-prettier": "^1.18.0",
      "typescript": "^3.5.3"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-curve25519-js-0.0.4-e6ad967e8cd284590d657bbfc90d8b50e49ba060-integrity/node_modules/curve25519-js/package.json",
    "readmeFilename": "README.md",
    "readme": "# curve25519-js\n\nCurve25519 signatures with X25519 keys.\n\n\n## Installation\n\n```\nnpm i curve25519-js\n```\n\n## Usage\n\n```js\nimport { sharedKey } from 'curve25519-js';\n\nconst ALICE_PRIV = '77076d0a7318a57d3c16c17251b26645df4c2f87ebc0992ab177fba51db92c2a';\nconst BOB_PUB = 'de9edb7d7b7dc1b4d35b61c2ece435373f8343c85b78674dadfc7e146f882b4f';\n\nconst alicePriv = Uint8Array.from(Buffer.from(ALICE_PRIV, 'hex'));\n\nconst bobPub = Uint8Array.from(Buffer.from(BOB_PUB, 'hex'));\n\nconst secret = sharedKey(alicePriv, bobPub);\n\nconsole.log('Secret:', Buffer.from(secret).toString('hex'))\n```\n\n## Functions\n\n### generateKeyPair\nGenerates a new key pair from the given 32-byte secret seed (which should be generated with a CSPRNG) and returns it as object:\n```ts\ngenerateKeyPair(seed: Uint8Array(32)): { \n  private: Uint8Array(32);\n  public: Uint8Array(32);\n}\n```\nThe returned keys can be used for signing and key agreement.\n\n### sign\n\nSigns the given message using the private key and returns signature.\n\n```ts\nsign(secretKey: Uint8Array(32), message: any, [random: Uint8Array(64)]): Uint8Array(64)\n```\n\nOptional random data argument (which must have 64 random bytes) turns on\nhash separation and randomization to make signatures non-deterministic.\n\n### verify\n\nVerifies the given signature for the message using the given private key.\nReturns `true` if the signature is valid, `false` otherwise.\n\n```ts\nverify(publicKey: Uint8Array(32), message: any, signature: Uint8Array(64)): boolean\n```\n\n### signMessage\n\nSigns the given message using the private key and returns\na signed message (signature concatenated with the message copy).\n\n```ts\nsignMessage(secretKey: Uint8Array(32), message: any, [random: Uint8Array(64)]): any\n```\n\nOptional random data argument (which must have 64 random bytes) turns on\nhash separation and randomization to make signatures non-deterministic.\n\n### openMessage\n\nVerifies signed message with the public key and returns the original message\nwithout signature if it's correct or `null` if verification fails.\n\n```ts\nopenMessage(publicKey: Uint8Array(32), signedMessage: any): Message | null\n```\n\n\n### sharedKey\nReturns a raw shared key between own private key and peer's public key (in other words, this is an ECC Diffie-Hellman function X25519, performing scalar multiplication).\n\nThe result should not be used directly as a key, but should be processed with a one-way function (e.g. HSalsa20 as in NaCl, or any secure cryptographic hash function, such as SHA-256, or key derivation function, such as HKDF).\n```ts\nsharedKey(privateKey: Uint8Array(32), publicKey: Uint8Array(32)): Uint8Array(32)\n```\n\n## How is it different from Ed25519?\nAxlsign allows calculating key agreement and signing using just a single X25519 key instead of two different X25519 and Ed25519 keys.\n\nIt uses keys in X25519 format (Montgomery), while Ed25519 uses keys in a different representation (Twisted Edwards). Internally, it converts keys to the correct format, but since such conversion would lose a sign bit, it also embeds the sign bit from public key into signature during signing, and puts it back into the key during verification.\n\nNote: if signing and performing key agreement with a single key is needed, but using keys in X25519 format is not a requrement, a better choice is to use Ed25519 keys, and then convert them to X25519 keys for key agreement (e.g. using <https://github.com/dchest/ed2curve-js>). This allows using only an external conversion functions without changing signature algorithms and formats.\n\n## Credits\n\nRe-written in 2019 with TypeScript support by Harvey Connor.\n\nWritten in 2016 by Dmitry Chestnykh.\nYou can use it under MIT or CC0 license.\n\nCurve25519 signatures idea and math by Trevor Perrin\n<https://moderncrypto.org/mail-archive/curves/2014/000205.html>\n\nDerived from TweetNaCl.js <https://tweetnacl.js.org>.\nPorted in 2014 by Dmitry Chestnykh and Devi Mandiri. Public domain.\nImplementation derived from TweetNaCl version 20140427\n<http://tweetnacl.cr.yp.to>",
    "licenseText": "Copyright (c) 2019 Smart Guide Pty Ltd\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\nOR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/curve25519-js/-/curve25519-js-0.0.4.tgz#e6ad967e8cd284590d657bbfc90d8b50e49ba060",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/curve25519-js/-/curve25519-js-0.0.4.tgz",
    "hash": "e6ad967e8cd284590d657bbfc90d8b50e49ba060",
    "integrity": "sha512-axn2UMEnkhyDUPWOwVKBMVIzSQy2ejH2xRGy1wq81dqRwApXfIzfbE3hIX0ZRFBIihf/KDqK158DLwESu4AK1w==",
    "registry": "npm",
    "packageName": "curve25519-js",
    "cacheIntegrity": "sha512-axn2UMEnkhyDUPWOwVKBMVIzSQy2ejH2xRGy1wq81dqRwApXfIzfbE3hIX0ZRFBIihf/KDqK158DLwESu4AK1w== sha1-5q2WfozShFkNZXu/yQ2LUOSboGA="
  },
  "registry": "npm",
  "hash": "e6ad967e8cd284590d657bbfc90d8b50e49ba060"
}