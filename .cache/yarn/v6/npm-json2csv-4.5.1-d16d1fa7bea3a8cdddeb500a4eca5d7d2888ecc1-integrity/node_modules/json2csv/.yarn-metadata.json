{
  "manifest": {
    "name": "json2csv",
    "version": "4.5.1",
    "description": "Convert JSON to CSV",
    "keywords": [
      "json",
      "to",
      "csv",
      "export",
      "convert",
      "parse"
    ],
    "author": {
      "name": "Mirco Zeiss",
      "email": "mirco.zeiss@gmail.com"
    },
    "license": "MIT",
    "bin": {
      "json2csv": "bin/json2csv.js"
    },
    "main": "dist/json2csv.cjs.js",
    "module": "dist/json2csv.esm.js",
    "browser": "dist/json2csv.umd.js",
    "repository": {
      "type": "git",
      "url": "https://github.com/zemirco/json2csv"
    },
    "scripts": {
      "build": "rollup -c",
      "dev": "rollup -c -w",
      "test": "node test | tap-spec",
      "lint": "eslint bin lib test",
      "test-with-coverage": "nyc --reporter=text node test | tap-spec",
      "coveralls": "nyc report --reporter=text-lcov | coveralls",
      "deploy:docs": "docpress b && gh-pages -d _docpress",
      "prepublish": "in-publish && npm run before:publish || not-in-publish",
      "before:publish": "npm test && npm run build && npm run deploy:docs",
      "release": "standard-version"
    },
    "dependencies": {
      "commander": "^2.15.1",
      "jsonparse": "^1.3.1",
      "lodash.get": "^4.4.2"
    },
    "devDependencies": {
      "@babel/core": "^7.3.3",
      "@babel/preset-env": "^7.3.1",
      "coveralls": "^3.0.3",
      "docpress": "^0.7.6",
      "eslint": "^5.14.1",
      "gh-pages": "^2.0.1",
      "in-publish": "^2.0.0",
      "nyc": "^13.3.0",
      "rollup": "^1.2.2",
      "rollup-plugin-babel": "^4.3.2",
      "rollup-plugin-commonjs": "^9.1.3",
      "rollup-plugin-node-builtins": "^2.1.2",
      "rollup-plugin-node-globals": "^1.2.1",
      "rollup-plugin-node-resolve": "^3.3.0",
      "standard-version": "^5.0.0",
      "tap-spec": "^5.0.0",
      "tape": "^4.10.1"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-json2csv-4.5.1-d16d1fa7bea3a8cdddeb500a4eca5d7d2888ecc1-integrity/node_modules/json2csv/package.json",
    "readmeFilename": "README.md",
    "readme": "# json2csv\n\nConverts json into csv with column titles and proper line endings.  \nCan be used as a module and from the command line.\n\n[![npm version][npm-badge]][npm-badge-url]\n[![Build Status][travis-badge]][travis-badge-url]\n[![Coverage Status][coveralls-badge]][coveralls-badge-url]\n[![Dependency Status][dev-badge]][dev-badge-url]\n\nSee the [CHANGELOG] for details about the latest release.\n\n## Features\n\n- Fast and lightweight\n- Scalable to infinitely large datasets (using stream processing)\n- Support for standard JSON as well as NDJSON\n- Advanced data selection (automatic field discovery, underscore-like selectors, custom data getters, default values for missing fields, flattening nested object, unwinding arrays, etc.)\n- Highly customizable (supportting custom quotation marks, delimiters, eol values, etc.)\n- Automatic escaping (preserving new lines, quotes, etc. in them)\n- Optional headers\n- Unicode encoding support\n- Pretty printing in table format to stdout\n\n## How to install\n\nYou can install json2csv as a dependency using NPM.\n\n```sh\n# Global so it can be call from anywhere\n$ npm install -g json2csv\n# or as a dependency of a project\n$ npm install json2csv --save\n```\n\nAlso, if you are loading json2csv directly to the browser you can pull it directly from the CDN.\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/json2csv\"></script>\n```\n\nBy default, the above script will get the latest release of json2csv. You can also specify a specific version:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/json2csv@4.2.1\"></script>\n```\n\n## Command Line Interface\n\n`json2csv` can be called from the command line if installed globally (using the `-g` flag).\n\n```sh\nUsage: json2csv [options]\n\nOptions:\n  -V, --version                        output the version number\n  -i, --input <input>                  Path and name of the incoming json file. Defaults to stdin.\n  -o, --output [output]                Path and name of the resulting csv file. Defaults to stdout.\n  -n, --ndjson                         Treat the input as NewLine-Delimited JSON.\n  -s, --no-streaming                   Process the whole JSON array in memory instead of doing it line by line.\n  -f, --fields <fields>                List of fields to process. Defaults to field auto-detection.\n  -c, --fields-config <path>           File with a fields configuration as a JSON array.\n  -u, --unwind <paths>                 Creates multiple rows from a single JSON document similar to MongoDB unwind.\n  -B, --unwind-blank                   When unwinding, blank out instead of repeating data.\n  -F, --flatten                        Flatten nested objects.\n  -S, --flatten-separator <separator>  Flattened keys separator. Defaults to '.'.\n  -v, --default-value [defaultValue]   Default value to use for missing fields.\n  -q, --quote [value]                  Character(s) to use a quote mark. Defaults to '\"'.\n  -Q, --double-quote [value]           Character(s) to use as a escaped quote. Defaults to a double `quote`, '\"\"'.\n  -d, --delimiter [delimiter]          Character(s) to use as delimiter. Defaults to ','.\n  -e, --eol [value]                    Character(s) to use as End-of-Line for separating rows. Defaults to '\\n'.\n  -E, --excel-strings                  Wraps string data to force Excel to interpret it as string even if it contains a number.\n  -H, --no-header                      Disable the column name header.\n  -a, --include-empty-rows             Includes empty rows in the resulting CSV output.\n  -b, --with-bom                       Includes BOM character at the beginning of the CSV.\n  -p, --pretty                         Print output as a pretty table. Use only when printing to console.\n  -h, --help                           output usage information\n```\n\nIf no input `-i` is specified the result is expected from to the console standard input.\nIf no output `-o` is specified the result is printed to the console standard output.\nIf no fields `-f` or `-c` are passed the fields of the first element are used since json2csv CLI process the items one at a time. You can use the `--no-streaming` flag to load the entire JSON in memory and get all the headers. However, keep in mind that this is slower and requires much more memory.\nUse `-p` to show the result as a table in the console.\n\n### CLI examples\n\n#### Input file and specify fields\n\n```sh\n$ json2csv -i input.json -f carModel,price,color\ncarModel,price,color\n\"Audi\",10000,\"blue\"\n\"BMW\",15000,\"red\"\n\"Mercedes\",20000,\"yellow\"\n\"Porsche\",30000,\"green\"\n```\n\n#### Input file, specify fields and use pretty logging\n\n```sh\n$ json2csv -i input.json -f carModel,price,color -p\n```\n\n![Screenshot](https://s3.amazonaws.com/zeMirco/github/json2csv/json2csv-pretty.png)\n\n#### Generating CSV containing only specific fields\n\n```sh\n$ json2csv -i input.json -f carModel,price,color -o out.csv\n$ cat out.csv\ncarModel,price,color\n\"Audi\",10000,\"blue\"\n\"BMW\",15000,\"red\"\n\"Mercedes\",20000,\"yellow\"\n\"Porsche\",30000,\"green\"\n```\n\nSame result will be obtained passing the fields config as a file.\n\n```sh\n$ json2csv -i input.json -c fieldsConfig.json -o out.csv\n```\n\nwhere the file `fieldsConfig.json` contains\n\n```json\n[\n  \"carModel\",\n  \"price\",\n  \"color\"\n]\n```\n\n#### Read input from stdin\n\n```sh\n$ json2csv -f price\n[{\"price\":1000},{\"price\":2000}]\n```\n\nHit <kbd>Enter</kbd> and afterwards <kbd>CTRL</kbd> + <kbd>D</kbd> to end reading from stdin. The terminal should show\n\n```\nprice\n1000\n2000\n```\n\n#### Appending to existing CSV\n\nSometimes you want to add some additional rows with the same columns.\nThis is how you can do that.\n\n```sh\n# Initial creation of csv with headings\n$ json2csv -i test.json -f name,version > test.csv\n# Append additional rows\n$ json2csv -i test.json -f name,version --no-header >> test.csv\n```\n\n## Javascript module\n\n`json2csv` can also be use programatically from you javascript codebase.\n\n### Available Options\n\nThe programatic APIs take a configuration object very equivalent to the CLI options. \n\n- `fields` - Array of Objects/Strings. Defaults to toplevel JSON attributes. See example below.\n- `ndjson` - Only effective on the streaming API. Indicates that data coming through the stream is NDJSON.\n- `unwind` - Array of Strings, creates multiple rows from a single JSON document similar to MongoDB's $unwind\n- `unwindBlank` - Boolean, unwind using blank values instead of repeating data.\n- `flatten` - Boolean, flattens nested objects. Defaults to `false`.\n- `flattenSeparator` - String, separator to use between nested JSON keys when `flatten` option enabled. Defaults to `.` if not specified.\n- `defaultValue` - String, default value to use when missing data. Defaults to `<empty>` if not specified. (Overridden by `fields[].default`)\n- `quote` - String, quote around cell values and column names. Defaults to `\"` if not specified.\n- `doubleQuote` - String, the value to replace double quote in strings. Defaults to 2x`quotes` (for example `\"\"`) if not specified.\n- `delimiter` - String, delimiter of columns. Defaults to `,` if not specified.\n- `eol` - String, overrides the default OS line ending (i.e. `\\n` on Unix and `\\r\\n` on Windows).\n- `excelStrings` - Boolean, converts string data into normalized Excel style data.\n- `header` - Boolean, determines whether or not CSV file will contain a title column. Defaults to `true` if not specified.\n- `includeEmptyRows` - Boolean, includes empty rows. Defaults to `false`.\n- `withBOM` - Boolean, with BOM character. Defaults to `false`.\n\n### json2csv parser (Synchronous API)\n\n`json2csv` can also be use programatically as a synchronous converter using its `parse` method. \n```js\nconst { Parser } = require('json2csv');\n\nconst fields = ['field1', 'field2', 'field3'];\nconst opts = { fields };\n\ntry {\n  const parser = new Parser(opts);\n  const csv = parser.parse(myData);\n  console.log(csv);\n} catch (err) {\n  console.error(err);\n}\n```\n\nyou can also use the convenience method `parse`\n\n```js\nconst { parse } = require('json2csv');\n\nconst fields = ['field1', 'field2', 'field3'];\nconst opts = { fields };\n\ntry {\n  const csv = parse(myData, opts);\n  console.log(csv);\n} catch (err) {\n  console.error(err);\n}\n```\n\nBoth of the methods above load the entire JSON in memory and do the whole processing in-memory while blocking Javascript event loop. For that reason is rarely a good reason to use it until your data is very small or your application doesn't do anything else.\n\n### json2csv async parser (Streaming API)\n\nThe synchronous API has the downside of loading the entire JSON array in memory and blocking javascript's event loop while processing the data. This means that you server won't be able to process more request or your UI will become irresponsive while data is being processed. For those reasons, is rarely a good reason to use it unless your data is very small or your application doesn't do anything else.\n\nThe async parser process the data as a non-blocking stream. This approach ensures a consistent memory footprint and avoid blocking javascript's event loop. Thus, it's better suited for large datasets or system with high concurrency. \n\nOne very important difference between the asynchronous and the synchronous APIs is that using the asynchronous API json objects are processed one by one. In practice, this means that only the fields in the first object of the array are automatically detected and other fields are just ignored. To avoid this, it's advisable to ensure that all the objects contain exactly the same fields or provide the list of fields using the `fields` option.\n\nThe async API uses takes a second options arguments that's directly passed to the underlying streams and accept the same options as the standard [Node.js streams](https://nodejs.org/api/stream.html#stream_new_stream_duplex_options).\n\nInstances of `AsyncParser` expose three objects:\n* *input:* Which allows to push more data\n* *processor:* A readable string representing the whole data processing. You can listen to all the standard events of Node.js streams.\n* *transform:* The json2csv transform. See bellow for more details.\n\n```js\nconst { AsyncParser } = require('json2csv');\n\nconst fields = ['field1', 'field2', 'field3'];\nconst opts = { fields };\nconst transformOpts = { highWaterMark: 8192 };\n\nconst asyncParser = new AsyncParser(opts, transformOpts);\n\nlet csv = '';\nasyncParser.processor\n  .on('data', chunk => (csv += chunk.toString()))\n  .on('end', () => console.log(csv))\n  .on('error', err => console.error(err));\n  \n// You can also listen for events on the conversion and see how the header or the lines are coming out.\nasyncParser.transform\n  .on('header', header => console.log(header))\n  .on('line', line => console.log(line))\n  .on('error', err => console.log(err));\n\nasyncParser.input.push(data); // This data might come from an HTTP request, etc.\nasyncParser.input.push(null); // Sending `null` to a stream signal that no more data is expected and ends it.\n```\n\n`AsyncParser` also exposes some convenience methods:\n* `fromInput` allows you to set the input stream.\n* `throughTransform` allows you to add transforms to the stream.\n* `toOutput` allows you to set the output stream.\n* `promise` returns a promise that resolves when the stream ends or errors.\n\n```js\nconst { createReadStream, createWriteStream } = require('fs');\nconst { AsyncParser } = require('json2csv');\n\nconst fields = ['field1', 'field2', 'field3'];\nconst opts = { fields };\nconst transformOpts = { highWaterMark: 8192 };\n\nconst input = createReadStream(inputPath, { encoding: 'utf8' });\nconst output = createWriteStream(outputPath, { encoding: 'utf8' });\nconst asyncParser = new JSON2CSVAsyncParser(opts, transformOpts);\nasyncParser.fromInput(input).toOutput(output).promise()\n  .then(csv => console.log(csv))\n  .catch(err => console.error(err));;\n```\n\nyou can also use the convenience method `parseAsync` which accept both JSON arrays/objects and readable streams and returns a promise.\n\n```js\nconst { parseAsync } = require('json2csv');\n\nconst fields = ['field1', 'field2', 'field3'];\nconst opts = { fields };\n\nparseAsync(myData, opts)\n  .then(csv => console.log(csv))\n  .catch(err => console.error(err));\n```\n\n### json2csv transform (Streaming API)\n\njson2csv also exposes the raw stream transform so you can pipe your json content into it. This is the same Transform that `AsyncParser` uses under the hood.\n\n```js\nconst { createReadStream, createWriteStream } = require('fs');\nconst { Transform } = require('json2csv');\n\nconst fields = ['field1', 'field2', 'field3'];\nconst opts = { fields };\nconst transformOpts = { highWaterMark: 16384, encoding: 'utf-8' };\n\nconst input = createReadStream(inputPath, { encoding: 'utf8' });\nconst output = createWriteStream(outputPath, { encoding: 'utf8' });\nconst json2csv = new Transform(opts, transformOpts);\n\nconst processor = input.pipe(json2csv).pipe(output);\n\n// You can also listen for events on the conversion and see how the header or the lines are coming out.\njson2csv\n  .on('header', header => console.log(header))\n  .on('line', line => console.log(line))\n  .on('error', err => console.log(err));\n```\n\nThe stream API can also work on object mode. This is useful when you have an input stream in object mode or if you are getting JSON objects one by one and want to convert them to CSV as they come.\n\n```js\n    const { Transform } = require(\"json2csv\");\n    const { Readable } = require('stream');\n\n    const input = new Readable({ objectMode: true });\n    input._read = () => {};\n    // myObjectEmitter is just a fake example representing anything that emit objects.\n    myObjectEmitter.on('object', obj => input.push(obj));\n    // Pushing a null close the stream\n    myObjectEmitter.end(()) => input.push(null));\n\n    const output = process.stdout;\n\n    const opts = {};\n    const transformOpts = { objectMode: true };\n\n    const json2csv = new Transform(opts, transformOpts);\n    const processor = input.pipe(json2csv).pipe(output);\n```\n\n### Javascript module examples\n\n#### Example `fields` option\n```js\n{\n  fields: [\n    // Supports label -> simple path\n    {\n      label: 'some label', // (optional, column will be labeled 'path.to.something' if not defined)\n      value: 'path.to.something', // data.path.to.something\n      default: 'NULL' // default if value is not found (optional, overrides `defaultValue` for column)\n    },\n\n    // Supports label -> derived value\n    {\n      label: 'some label', // Supports duplicate labels (required, else your column will be labeled [function])\n      value: (row, field) => row.path1 + row.path2, // field = { label, default }\n      default: 'NULL', // default if value function returns null or undefined\n      stringify: true // If value is function use this flag to signal if resulting string will be quoted (stringified) or not (optional, default: true)\n    },\n\n    // Support pathname -> pathvalue\n    'simplepath', // equivalent to {value:'simplepath'}\n    'path.to.value' // also equivalent to {value:'path.to.value'}\n  ]\n}\n```\n\n#### Example 1\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = ['car', 'price', 'color'];\nconst myCars = [\n  {\n    \"car\": \"Audi\",\n    \"price\": 40000,\n    \"color\": \"blue\"\n  }, {\n    \"car\": \"BMW\",\n    \"price\": 35000,\n    \"color\": \"black\"\n  }, {\n    \"car\": \"Porsche\",\n    \"price\": 60000,\n    \"color\": \"green\"\n  }\n];\n\nconst json2csvParser = new Parser({ fields });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\nwill output to console\n\n```\ncar, price, color\n\"Audi\", 40000, \"blue\"\n\"BMW\", 35000, \"black\"\n\"Porsche\", 60000, \"green\"\n```\n\n#### Example 2\n\nSimilarly to [mongoexport](http://www.mongodb.org/display/DOCS/mongoexport) you can choose which fields to export.\n\n```js\nconst { Parser } = require('json2csv');\nconst fields = ['car', 'color'];\n\nconst json2csvParser = new Parser({ fields });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\nResults in\n\n```\ncar, color\n\"Audi\", \"blue\"\n\"BMW\", \"black\"\n\"Porsche\", \"green\"\n```\n\n#### Example 3\n\nYou can choose custom column names for the exported file.\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = [{\n  label: 'Car Name',\n  value: 'car'\n},{\n  label: 'Price USD',\n  value: 'price'\n}];\n\nconst json2csvParser = new Parser({ fields });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\n#### Example 4\n\nYou can also specify nested properties using dot notation.\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = ['car.make', 'car.model', 'price', 'color'];\nconst myCars = [\n  {\n    \"car\": {\"make\": \"Audi\", \"model\": \"A3\"},\n    \"price\": 40000,\n    \"color\": \"blue\"\n  }, {\n    \"car\": {\"make\": \"BMW\", \"model\": \"F20\"},\n    \"price\": 35000,\n    \"color\": \"black\"\n  }, {\n    \"car\": {\"make\": \"Porsche\", \"model\": \"9PA AF1\"},\n    \"price\": 60000,\n    \"color\": \"green\"\n  }\n];\n\nconst json2csvParser = new Parser({ fields });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\nwill output to console\n\n```\ncar.make, car.model, price, color\n\"Audi\", \"A3\", 40000, \"blue\"\n\"BMW\", \"F20\", 35000, \"black\"\n\"Porsche\", \"9PA AF1\", 60000, \"green\"\n```\n\n#### Example 5\n\nUse a custom delimiter to create tsv files using the delimiter option:\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = ['car', 'price', 'color'];\n\nconst json2csvParser = new Parser({ fields, delimiter: '\\t' });\nconst tsv = json2csvParser.parse(myCars);\n\nconsole.log(tsv);\n```\n\nWill output:\n\n```\ncar price color\n\"Audi\"  10000 \"blue\"\n\"BMW\" 15000 \"red\"\n\"Mercedes\"  20000 \"yellow\"\n\"Porsche\" 30000 \"green\"\n```\n\nIf no delimiter is specified, the default `,` is used\n\n#### Example 6\n\nYou can choose custom quotation marks.\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = [{\n  label: 'Car Name',\n  value: 'car'\n},{\n  label: 'Price USD',\n  value: 'price'\n}];\n\nconst json2csvParser = new Parser({ fields, quote: '' });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\nResults in\n\n```\nCar Name, Price USD\nAudi, 10000\nBMW, 15000\nPorsche, 30000\n```\n\n#### Example 7\n\nYou can unwind arrays similar to MongoDB's $unwind operation using the `unwind` option.\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = ['carModel', 'price', 'colors'];\nconst myCars = [\n  {\n    \"carModel\": \"Audi\",\n    \"price\": 0,\n    \"colors\": [\"blue\",\"green\",\"yellow\"]\n  }, {\n    \"carModel\": \"BMW\",\n    \"price\": 15000,\n    \"colors\": [\"red\",\"blue\"]\n  }, {\n    \"carModel\": \"Mercedes\",\n    \"price\": 20000,\n    \"colors\": \"yellow\"\n  }, {\n    \"carModel\": \"Porsche\",\n    \"price\": 30000,\n    \"colors\": [\"green\",\"teal\",\"aqua\"]\n  }\n];\n\nconst json2csvParser = new Parser({ fields, unwind: 'colors' });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\nwill output to console\n\n```\n\"carModel\",\"price\",\"colors\"\n\"Audi\",0,\"blue\"\n\"Audi\",0,\"green\"\n\"Audi\",0,\"yellow\"\n\"BMW\",15000,\"red\"\n\"BMW\",15000,\"blue\"\n\"Mercedes\",20000,\"yellow\"\n\"Porsche\",30000,\"green\"\n\"Porsche\",30000,\"teal\"\n\"Porsche\",30000,\"aqua\"\n```\n\n#### Example 8\n\nYou can also unwind arrays multiple times or with nested objects.\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = ['carModel', 'price', 'items.name', 'items.color', 'items.items.position', 'items.items.color'];\nconst myCars = [\n  {\n    \"carModel\": \"BMW\",\n    \"price\": 15000,\n    \"items\": [\n      {\n        \"name\": \"airbag\",\n        \"color\": \"white\"\n      }, {\n        \"name\": \"dashboard\",\n        \"color\": \"black\"\n      }\n    ]\n  }, {\n    \"carModel\": \"Porsche\",\n    \"price\": 30000,\n    \"items\": [\n      {\n        \"name\": \"airbag\",\n        \"items\": [\n          {\n            \"position\": \"left\",\n            \"color\": \"white\"\n          }, {\n            \"position\": \"right\",\n            \"color\": \"gray\"\n          }\n        ]\n      }, {\n        \"name\": \"dashboard\",\n        \"items\": [\n          {\n            \"position\": \"left\",\n            \"color\": \"gray\"\n          }, {\n            \"position\": \"right\",\n            \"color\": \"black\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nconst json2csvParser = new Parser({ fields, unwind: ['items', 'items.items'] });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\nwill output to console\n\n```\n\"carModel\",\"price\",\"items.name\",\"items.color\",\"items.items.position\",\"items.items.color\"\n\"BMW\",15000,\"airbag\",\"white\",,\n\"BMW\",15000,\"dashboard\",\"black\",,\n\"Porsche\",30000,\"airbag\",,\"left\",\"white\"\n\"Porsche\",30000,\"airbag\",,\"right\",\"gray\"\n\"Porsche\",30000,\"dashboard\",,\"left\",\"gray\"\n\"Porsche\",30000,\"dashboard\",,\"right\",\"black\"\n```\n\n#### Example 9\n\nYou can also unwind arrays blanking the repeated fields.\n\n```js\nconst { Parser } = require('json2csv');\n\nconst fields = ['carModel', 'price', 'items.name', 'items.color', 'items.items.position', 'items.items.color'];\nconst myCars = [\n  {\n    \"carModel\": \"BMW\",\n    \"price\": 15000,\n    \"items\": [\n      {\n        \"name\": \"airbag\",\n        \"color\": \"white\"\n      }, {\n        \"name\": \"dashboard\",\n        \"color\": \"black\"\n      }\n    ]\n  }, {\n    \"carModel\": \"Porsche\",\n    \"price\": 30000,\n    \"items\": [\n      {\n        \"name\": \"airbag\",\n        \"items\": [\n          {\n            \"position\": \"left\",\n            \"color\": \"white\"\n          }, {\n            \"position\": \"right\",\n            \"color\": \"gray\"\n          }\n        ]\n      }, {\n        \"name\": \"dashboard\",\n        \"items\": [\n          {\n            \"position\": \"left\",\n            \"color\": \"gray\"\n          }, {\n            \"position\": \"right\",\n            \"color\": \"black\"\n          }\n        ]\n      }\n    ]\n  }\n];\n\nconst json2csvParser = new Parser({ fields, unwind: ['items', 'items.items'], unwindBlank: true });\nconst csv = json2csvParser.parse(myCars);\n\nconsole.log(csv);\n```\n\nwill output to console\n\n```\n\"carModel\",\"price\",\"items.name\",\"items.color\",\"items.items.position\",\"items.items.color\"\n\"BMW\",15000,\"airbag\",\"white\",,\n,,\"dashboard\",\"black\",,\n\"Porsche\",30000,\"airbag\",,\"left\",\"white\"\n,,,,\"right\",\"gray\"\n,,\"dashboard\",,\"left\",\"gray\"\n,,,,\"right\",\"black\"\n```\n\n### Migrating from 3.X to 4.X\n\nWhat in 3.X used to be\n```js\nconst json2csv = require('json2csv');\nconst csv = json2csv({ data: myData, fields: myFields, unwindPath: paths, ... });\n```\n\ncan be replaced by\n```js\nconst Json2csvParser = require('json2csv').Parser;\nconst json2csvParser = new Json2csvParser({ fields: myFields, unwind: paths, ... });\nconst csv = json2csvParser.parse(myData);\n```\n\nor the convenience method\n```js\nconst json2csv = require('json2csv');\nconst csv = json2csv.parse(myData, { fields: myFields, unwind: paths, ... });\n```\n\nPlease note that many of the configuration parameters have been slightly renamed. Please check one by one that all your parameters are correct.\nYou can se the documentation for json2csv 3.11.5 [here](https://github.com/zemirco/json2csv/blob/v3.11.5/README.md).\n\n## Known Gotchas\n\n### Excel support\n\n#### Avoiding excel autoformatting\n\nExcel tries to automatically detect the format of every field (number, date, string, etc.) regardless of whether the field is quoted or not.\n\nThis might produce few undesired effects with, for example, serial numbers:\n- Large numbers are displayed using scientific notation\n- Leading zeros are stripped.\n\nThe `excelString` option produces a Excel-specific CSV file that forces Excel to interpret string fields as strings. Please note that the CSV will look incorrect if viewing it somewhere else than Excel.\n\n#### Preserving new lines\n\nExcel only recognize `\\r\\n` as valid new line inside a cell.\n\n#### Unicode Support\n\nExcel can display Unicode correctly (just setting the `withBOM` option to true). However, Excel can't save unicode so, if you do changes to the CSV and save it from Excel, the Unicode character will not be displayed correctly.\n\n\n### PowerShell escaping\n\nPowerShell do some estrange double quote escaping escaping which results on each line of the CSV missing the first and last quote if outputting the result directly to stdout. Instead of that, it's advisable that you write the result directly to a file.\n\n## Building\n\njson2csv is packaged using `rollup`. You can generate the packages running:\n\n```sh\nnpm run build\n```\nwhich generates 3 files under the `dist folder`:\n\n* `json2csv.umd.js` UMD module transpiled to ES5\n* `json2csv.esm.js` ES5 module (import/export)\n* `json2csv.cjs.js` CommonJS module\n\nWhen you use packaging tools like webpack and such, they know which version to use depending on your configuration.\n\n## Testing\n\nRun the folowing command to check the code style.\n\n```sh\n$ npm run lint\n```\n\nRun the following command to run the tests and return coverage\n\n```sh\n$ npm run test-with-coverage\n```\n\n## Contributors\n\nAfter you clone the repository you just need to install the required packages for development by runnning following command under json2csv dir.\n\n```sh\n$ npm install\n```\n\nBefore making any pull request please ensure sure that your code is formatted, test are passing and test coverage haven't decreased. (See [Testing](#testing))\n\n## License\n\nSee [LICENSE.md].\n\n[npm-badge]: https://badge.fury.io/js/json2csv.svg\n[npm-badge-url]: http://badge.fury.io/js/json2csv\n[travis-badge]: https://travis-ci.org/zemirco/json2csv.svg\n[travis-badge-url]: https://travis-ci.org/zemirco/json2csv\n[coveralls-badge]: https://coveralls.io/repos/zemirco/json2csv/badge.svg?branch=master\n[coveralls-badge-url]: https://coveralls.io/r/zemirco/json2csv?branch=master\n[dev-badge]: https://david-dm.org/zemirco/json2csv.svg\n[dev-badge-url]: https://david-dm.org/zemirco/json2csv\n[CHANGELOG]: https://github.com/zemirco/json2csv/blob/master/CHANGELOG.md\n[LICENSE.md]: https://github.com/zemirco/json2csv/blob/master/LICENSE.md\n",
    "licenseText": "Copyright (C) 2012 [Mirco Zeiss](mailto: mirco.zeiss@gmail.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and\nto permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/json2csv/-/json2csv-4.5.1.tgz#d16d1fa7bea3a8cdddeb500a4eca5d7d2888ecc1",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/json2csv/-/json2csv-4.5.1.tgz",
    "hash": "d16d1fa7bea3a8cdddeb500a4eca5d7d2888ecc1",
    "integrity": "sha512-o90Xa1ziGk3i7AJEO79Jac4+7SEUk58/DxS5mDPW6GF7poX0y7Y0pm1FbWrkz9VzKE4MpUW9aKBOCpJ0U1Ua8A==",
    "registry": "npm",
    "packageName": "json2csv",
    "cacheIntegrity": "sha512-o90Xa1ziGk3i7AJEO79Jac4+7SEUk58/DxS5mDPW6GF7poX0y7Y0pm1FbWrkz9VzKE4MpUW9aKBOCpJ0U1Ua8A== sha1-0W0fp76jqM3d61AKTspdfSiI7ME="
  },
  "registry": "npm",
  "hash": "d16d1fa7bea3a8cdddeb500a4eca5d7d2888ecc1"
}