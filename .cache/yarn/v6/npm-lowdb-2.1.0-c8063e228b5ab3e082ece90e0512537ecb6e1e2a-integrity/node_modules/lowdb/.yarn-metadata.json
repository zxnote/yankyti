{
  "manifest": {
    "name": "lowdb",
    "version": "2.1.0",
    "description": "Tiny local JSON database for Node, Electron and the browser",
    "type": "module",
    "exports": "./lib/index.js",
    "files": [
      "lib",
      "LICENSE-MIT",
      "LICENSE-PARITY",
      "LICENSE-PATRON"
    ],
    "scripts": {
      "test": "ava",
      "lint": "eslint src --ext .ts --ignore-path .gitignore",
      "build": "del-cli lib && tsc",
      "prepublishOnly": "npm run build",
      "postversion": "git push && git push --tags && npm publish",
      "prepare": "husky install"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/typicode/lowdb.git"
    },
    "keywords": [
      "database",
      "electron",
      "embed",
      "embedded",
      "flat",
      "JSON",
      "local",
      "localStorage"
    ],
    "author": {
      "name": "Typicode",
      "email": "typicode@gmail.com"
    },
    "license": "Parity-7.0.0 AND MIT WITH Patron-1.0.0",
    "bugs": {
      "url": "https://github.com/typicode/lowdb/issues"
    },
    "homepage": "https://github.com/typicode/lowdb#readme",
    "devDependencies": {
      "@commitlint/cli": "^12.0.1",
      "@commitlint/config-conventional": "^12.0.1",
      "@commitlint/prompt-cli": "^12.0.1",
      "@tsconfig/node12": "^1.0.7",
      "@types/lodash": "^4.14.168",
      "@types/node": "^15.0.3",
      "@typicode/eslint-config": "^0.1.0",
      "ava": "^3.15.0",
      "del-cli": "^3.0.1",
      "husky": "^6.0.0",
      "lodash": "^4.17.21",
      "tempy": "^1.0.1",
      "ts-node": "^9.1.1",
      "typescript": "^4.2.3"
    },
    "dependencies": {
      "steno": "^1.0.0"
    },
    "engines": {
      "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
    },
    "types": "lib",
    "ava": {
      "extensions": {
        "ts": "module"
      },
      "nonSemVerExperiments": {
        "configurableModuleFormat": true
      },
      "nodeArguments": [
        "--loader=ts-node/esm"
      ]
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-lowdb-2.1.0-c8063e228b5ab3e082ece90e0512537ecb6e1e2a-integrity/node_modules/lowdb/package.json",
    "readmeFilename": "README.md",
    "readme": "# lowdb [![](http://img.shields.io/npm/dm/lowdb.svg?style=flat)](https://www.npmjs.org/package/lowdb) [![Node.js CI](https://github.com/typicode/lowdb/actions/workflows/node.js.yml/badge.svg)](https://github.com/typicode/lowdb/actions/workflows/node.js.yml)\n\n> Tiny local JSON database for small projects ðŸ¦‰\n\n```js\ndb.data.posts.push({ id: 1, title: 'lowdb is awesome' })\ndb.write()\n```\n\n```js\n// db.json\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"lowdb is awesome\" }\n  ]\n}\n```\n\n## Free for Open Source\n\nTo help with OSS funding, lowdb v2 is released under Parity license for a limited time. It'll be released under MIT license once the __goal of 100 [sponsors](https://github.com/sponsors/typicode)__ is reached (currently at 57) or in five months.\n\nMeanwhile, lowdb v2 can be freely used in Open Source projects. Sponsors can use it in any type of project.\n\nIf you've installed this new version without knowing about the license change, you're excused for 30 days. There's also a 30 days trial. See license files for more details.\n\nThank you for your support!\n\n__Note:__ if you're already sponsoring [husky](https://github.com/typicode/husky), you can use lowdb v2 today :)\n\n## Companies\n\n[Become a sponsor and have your company logo here](https://github.com/sponsors/typicode).\n\n## Features\n\n- __Lightweight__\n- __Minimalist__ and easy to learn API\n- Query and modify data using __plain JS__\n- Improved __TypeScript__ support\n- Atomic write\n- Hackable:\n  - Change storage, file format (JSON, YAML, ...) or add encryption via [adapters](#adapters)\n  - Add lodash, ramda, ... for super powers!\n\n## Install\n\n```sh\nnpm install lowdb\n```\n\n## Usage\n\n```js\nimport { join } from 'path'\nimport { Low, JSONFile } from 'lowdb'\n\n// Use JSON file for storage\nconst file = join(__dirname, 'db.json')\nconst adapter = new JSONFile(file)\nconst db = new Low(adapter)\n\n// Read data from JSON file, this will set db.data content\nawait db.read()\n\n// If file.json doesn't exist, db.data will be null\n// Set default data\ndb.data ||= { posts: [] }\n\n// Create and query items using plain JS\ndb.data.posts.push('hello world')\ndb.data.posts[0]\n\n// You can also use this syntax if you prefer\nconst { posts } = db.data\nposts.push('hello world')\n\n// Write db.data content to db.json\nawait db.write()\n```\n\n```js\n// db.json\n{\n  \"posts\": [ \"hello world\" ]\n}\n```\n\n### TypeScript\n\nLowdb now comes with TypeScript support. You can even type `db.data` content.\n\n```ts\ntype Data = {\n  posts: string[] // Expect posts to be an array of strings\n}\nconst adapter = new JSONFile<Data>('db.json')\nconst db = new Low<Data>(adapter)\n\ndb.data\n  .posts\n  .push(1) // TypeScript error ðŸŽ‰\n```\n\n### Lodash\n\nYou can easily add lodash or other utility libraries to improve lowdb.\n\n```js\nimport lodash from lodash\n\n// ...\n// Note: db.data needs to be initialized before lodash.chain is called.\ndb.chain = lodash.chain(db.data)\n\n// Instead of db.data, you can now use db.chain if you want to use the powerful API that lodash provides\nconst post = db.chain\n  .get('posts')\n  .find({ id: 1 })\n  .value()\n```\n\n### More examples\n\nFor CLI, server and browser usage, see [`examples/`](/examples) directory.\n\n## API\n\n### Classes\n\nLowdb has two classes (for asynchronous and synchronous adapters).\n\n#### `new Low(adapter)`\n\n```js\nimport { Low, JSONFile } from 'lowdb'\n\nconst db = new Low(new JSONFile('file.json'))\nawait db.read()\nawait db.write()\n```\n\n#### `new LowSync(adapterSync)`\n\n```js\nimport { LowSync, JSONFileSync } from 'lowdb'\n\nconst db = new LowSync(new JSONFileSync('file.json'))\ndb.read()\ndb.write()\n```\n\n### Methods\n\n#### `db.read()`\n\nCalls `adaper.read()` and sets `db.data`.\n\n**Note:** `JSONFile` and `JSONFileSync` adapters will set `db.data` to `null` if file doesn't exist.\n\n```js\ndb.data // === null\ndb.read()\ndb.data // !== null\n```\n\n#### `db.write()`\n\nCalls `adapter.write(db.data)`.\n\n```js\ndb.data = { posts: [] }\ndb.write() // file.json will be { posts: [] }\ndb.data = {}\ndb.write() // file.json will be {}\n```\n\n### Properties\n\n#### `db.data`\n\nHolds your db content. If you're using the adapters coming with lowdb, it can be any type supported by [`JSON.stringify`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n\nFor example:\n\n```js\ndb.data = 'string'\ndb.data = [1, 2, 3]\ndb.data = { key: 'value' }\n```\n\n## Adapters\n\n### Lowdb adapters\n\n#### `JSONFile` `JSONFileSync`\n\nAdapters for reading and writing JSON files.\n\n```js\nnew Low(new JSONFile(filename))\nnew LowSync(new JSONFileSync(filename))\n```\n\n#### `Memory` `MemorySync`\n\nIn-memory adapters. Useful for speeding up unit tests.\n\n```js\nnew Low(new Memory())\nnew LowSync(new MemorySync())\n```\n\n#### `LocalStorage`\n\nSynchronous adapter for `window.localStorage`.\n\n```js\nnew LowSync(new LocalStorage(name))\n```\n\n#### `TextFile` `TextFileSync`\n\nAdapters for reading and writing text. Useful for creating custom adapters.\n\n### Third-party adapters\n\nIf you've published an adapter for lowdb, feel free to create a PR to add it here.\n\n### Writing your own adapter\n\nYou may want to create an adapter to write `db.data` to YAML, XML, encrypt data, a remote storage, ...\n\nAn adapter is a simple class that just needs to expose two methods:\n\n```js\nclass AsyncAdapter {\n  read() { /* ... */ } // should return Promise<data>\n  write(data) { /* ... */ } // should return Promise<void>\n}\n\nclass SyncAdapter {\n  read() { /* ... */ } // should return data\n  write(data) { /* ... */ } // should return nothing\n}\n```\n\nFor example, let's say you have some async storage and want to create an adapter for it:\n\n```js\nimport { api } from './AsyncStorage'\n\nclass CustomAsyncAdapter {\n  // Optional: your adapter can take arguments\n  constructor(args) {\n    // ...\n  }\n\n  async read() {\n    const data = await api.read()\n    return data\n  }\n\n  async write(data) {\n    await api.write(data)\n  }\n}\n\nconst adapter = new CustomAsyncAdapter()\nconst db = new Low(adapter)\n```\n\nSee [`src/adapters/`](src/adapters) for more examples.\n\n#### Custom serialization\n\nTo create an adapter for another format than JSON, you can use `TextFile` or `TextFileSync`. \n\nFor example:\n\n```js\nimport { Adapter, Low, TextFile } from 'Low.js'\nimport YAML from 'yaml'\n\nexport class YAMLFile {\n  private adapter\n\n  constructor(filename: string) {\n    this.adapter = new TextFile(filename)\n  }\n\n  async read() {\n    const data = await this.adapter.read()\n    if (data === null) {\n      return null\n    } else {\n      return YAML.parse(data)\n    }\n  }\n\n  write(obj) {\n    return this.adapter.write(YAML.stringify(obj))\n  }\n}\n\nconst adapter = new YAMLFile('file.yaml')\nconst db = new Low(adapter)\n```\n\n## Limits\n\nLowdb doesn't support Node's cluster module.\n\nIf you have large JavaScript objects (`~10-100MB`) you may hit some performance issues. This is because whenever you call `db.write`, the whole `db.data` is serialized and written to storage.\n\nDepending on your use case, this can be fine or not. It can be mitigated by doing batch operations and calling `db.write` only when you need it. \n\nIf you plan to scale, it's highly recommended to use databases like PostgreSQL, MongoDB, ... \n\n## License\n\n[License Zero Parity 7.0.0](https://paritylicense.com/versions/7.0.0.html) and MIT (contributions) with exception [License Zero Patron 1.0.0](https://patronlicense.com/versions/1.0.0).\n",
    "licenseText": "License Zero Parity 7.0.0 (see LICENSE-PARITY file) and MIT (contributions, see LICENSE-MIT file) with exception License Zero Patron 1.0.0 (see LICENSE-PATRON file)\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/lowdb/-/lowdb-2.1.0.tgz#c8063e228b5ab3e082ece90e0512537ecb6e1e2a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/lowdb/-/lowdb-2.1.0.tgz",
    "hash": "c8063e228b5ab3e082ece90e0512537ecb6e1e2a",
    "integrity": "sha512-F4Go8/V37gAidTR3c5poyjprOpZSDNSLJVOmI0ny4D4q9rC37OkBhlzX0bqj7LZlT3UIj4FchmZrrSw7qY+eGQ==",
    "registry": "npm",
    "packageName": "lowdb",
    "cacheIntegrity": "sha512-F4Go8/V37gAidTR3c5poyjprOpZSDNSLJVOmI0ny4D4q9rC37OkBhlzX0bqj7LZlT3UIj4FchmZrrSw7qY+eGQ== sha1-yAY+Iotas+CC7OkOBRJTfstuHio="
  },
  "registry": "npm",
  "hash": "c8063e228b5ab3e082ece90e0512537ecb6e1e2a"
}