{
  "manifest": {
    "name": "mongoose",
    "description": "Mongoose MongoDB ODM",
    "version": "6.5.3",
    "author": {
      "name": "Guillermo Rauch",
      "email": "guillermo@learnboost.com"
    },
    "keywords": [
      "mongodb",
      "document",
      "model",
      "schema",
      "database",
      "odm",
      "data",
      "datastore",
      "query",
      "nosql",
      "orm",
      "db"
    ],
    "license": "MIT",
    "dependencies": {
      "bson": "^4.6.5",
      "kareem": "2.4.1",
      "mongodb": "4.8.1",
      "mpath": "0.9.0",
      "mquery": "4.0.3",
      "ms": "2.1.3",
      "sift": "16.0.0"
    },
    "devDependencies": {
      "@babel/core": "7.18.10",
      "@typescript-eslint/eslint-plugin": "5.32.0",
      "@typescript-eslint/parser": "5.32.0",
      "acquit": "1.2.1",
      "acquit-ignore": "0.2.0",
      "acquit-require": "0.1.1",
      "assert-browserify": "2.0.0",
      "axios": "0.27.2",
      "babel-loader": "8.2.5",
      "benchmark": "2.1.4",
      "bluebird": "3.7.2",
      "buffer": "^5.6.0",
      "cheerio": "1.0.0-rc.12",
      "crypto-browserify": "3.12.0",
      "dox": "0.9.1",
      "eslint": "8.21.0",
      "eslint-plugin-mocha-no-only": "1.1.1",
      "express": "^4.18.1",
      "highlight.js": "11.6.0",
      "lodash.isequal": "4.5.0",
      "lodash.isequalwith": "4.4.0",
      "marked": "4.0.18",
      "mkdirp": "^1.0.4",
      "mocha": "10.0.0",
      "moment": "2.x",
      "mongodb-memory-server": "8.8.0",
      "ncp": "^2.0.0",
      "nyc": "15.1.0",
      "pug": "3.0.2",
      "q": "1.5.1",
      "sinon": "14.0.0",
      "stream-browserify": "3.0.0",
      "ts-benchmark": "^1.1.10",
      "tsd": "0.20.0",
      "typescript": "4.7.4",
      "uuid": "8.3.2",
      "webpack": "5.74.0"
    },
    "scripts": {
      "docs:clean": "npm run docs:clean:stable",
      "docs:clean:stable": "rimraf index.html && rimraf -rf ./docs/*.html  && rimraf -rf ./docs/api && rimraf -rf ./docs/tutorials/*.html && rimraf -rf ./docs/typescript/*.html && rimraf -rf ./docs/*.html && rimraf -rf ./docs/source/_docs && rimraf -rf ./tmp",
      "docs:clean:legacy": "rimraf index.html && rimraf -rf ./docs/5.x && rimraf -rf ./docs/source/_docs && rimraf -rf ./tmp",
      "docs:copy:tmp": "mkdirp ./tmp/docs/css && mkdirp ./tmp/docs/js && mkdirp ./tmp/docs/images && mkdirp ./tmp/docs/tutorials && mkdirp ./tmp/docs/typescript && ncp ./docs/css ./tmp/docs/css --filter=.css$ && ncp ./docs/js ./tmp/docs/js --filter=.js$ && ncp ./docs/images ./tmp/docs/images && ncp ./docs/tutorials ./tmp/docs/tutorials && ncp ./docs/typescript ./tmp/docs/typescript && cp index.html ./tmp",
      "docs:copy:tmp:legacy": "rimraf ./docs/5.x && ncp ./tmp ./docs/5.x",
      "docs:checkout:gh-pages": "git checkout gh-pages",
      "docs:checkout:legacy": "git checkout 5.x",
      "docs:generate": "node ./scripts/website.js",
      "docs:generate:search": "node docs/search.js",
      "docs:merge:stable": "git merge master",
      "docs:merge:legacy": "git merge 5.x",
      "docs:test": "npm run docs:generate && npm run docs:generate:search",
      "docs:view": "node ./scripts/static.js",
      "docs:prepare:publish:stable": "npm run docs:checkout:gh-pages && npm run docs:merge:stable && npm run docs:clean:stable && npm run docs:generate && npm run docs:generate:search",
      "docs:prepare:publish:legacy": "npm run docs:checkout:legacy && npm run docs:merge:legacy && npm run docs:clean:stable && npm run docs:generate && npm run docs:copy:tmp && docs:checkout:gh-pages && docs:copy:tmp:legacy",
      "lint": "eslint .",
      "lint-js": "eslint . --ext .js",
      "lint-ts": "eslint . --ext .ts",
      "build-browser": "node ./scripts/build-browser.js",
      "prepublishOnly": "npm run build-browser",
      "release": "git pull && git push origin master --tags && npm publish",
      "release-legacy": "git pull origin 5.x && git push origin 5.x --tags && npm publish --tag legacy",
      "mongo": "node ./tools/repl.js",
      "test": "mocha --exit ./test/*.test.js",
      "test-rs": "START_REPLICA_SET=1 mocha --timeout 30000 --exit ./test/*.test.js",
      "test-tsd": "node ./test/types/check-types-filename && tsd",
      "tdd": "mocha ./test/*.test.js --inspect --watch --recursive --watch-files ./**/*.{js,ts}",
      "test-coverage": "nyc --reporter=html --reporter=text npm test",
      "ts-benchmark": "ts-benchmark -p ./benchmarks/typescript/simple -f 17/100000 18 29 32",
      "ts-benchmark-watch": "ts-benchmark -p ./benchmarks/typescript/simple -w ./types -i -s -f 17/100000 18 29 32 -b master"
    },
    "main": "./index.js",
    "types": "./types/index.d.ts",
    "engines": {
      "node": ">=12.0.0"
    },
    "bugs": {
      "url": "https://github.com/Automattic/mongoose/issues/new"
    },
    "repository": {
      "type": "git",
      "url": "git://github.com/Automattic/mongoose.git"
    },
    "homepage": "https://mongoosejs.com/",
    "browser": "./dist/browser.umd.js",
    "mocha": {
      "extension": [
        "test.js"
      ],
      "watch-files": [
        "test/**/*.js"
      ]
    },
    "config": {
      "mongodbMemoryServer": {
        "disablePostinstall": true
      }
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/mongoose"
    },
    "tsd": {
      "directory": "test/types",
      "compilerOptions": {
        "esModuleInterop": false,
        "strict": true,
        "allowSyntheticDefaultImports": true,
        "strictPropertyInitialization": false,
        "noImplicitAny": false,
        "strictNullChecks": true,
        "module": "commonjs",
        "target": "ES2017"
      }
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-mongoose-6.5.3-776f6c72f411d10cd131135f6b1fce14ebf7f706-integrity/node_modules/mongoose/package.json",
    "readmeFilename": "README.md",
    "readme": "# Mongoose\n\nMongoose is a [MongoDB](https://www.mongodb.org/) object modeling tool designed to work in an asynchronous environment. Mongoose supports both promises and callbacks.\n\n[![Slack Status](https://img.shields.io/badge/slack-mongoosejsteam-34D058.svg?logo=slack )](https://mongoosejsteam.slack.com)\n[![Build Status](https://github.com/Automattic/mongoose/workflows/Test/badge.svg)](https://github.com/Automattic/mongoose)\n[![NPM version](https://badge.fury.io/js/mongoose.svg)](http://badge.fury.io/js/mongoose)\n\n[![npm](https://nodei.co/npm/mongoose.png)](https://www.npmjs.com/package/mongoose)\n\n## Documentation\n\nThe official documentation website is [mongoosejs.com](http://mongoosejs.com/).\n\nMongoose 6.0.0 was released on August 24, 2021. You can find more details on [backwards breaking changes in 6.0.0 on our docs site](https://mongoosejs.com/docs/migrating_to_6.html).\n\n## Support\n\n  - [Stack Overflow](http://stackoverflow.com/questions/tagged/mongoose)\n  - [Bug Reports](https://github.com/Automattic/mongoose/issues/)\n  - [Mongoose Slack Channel](http://slack.mongoosejs.io/)\n  - [Help Forum](http://groups.google.com/group/mongoose-orm)\n  - [MongoDB Support](https://docs.mongodb.org/manual/support/)\n\n## Plugins\n\nCheck out the [plugins search site](http://plugins.mongoosejs.io/) to see hundreds of related modules from the community. Next, learn how to write your own plugin from the [docs](http://mongoosejs.com/docs/plugins.html) or [this blog post](http://thecodebarbarian.com/2015/03/06/guide-to-mongoose-plugins).\n\n## Contributors\n\nPull requests are always welcome! Please base pull requests against the `master`\nbranch and follow the [contributing guide](https://github.com/Automattic/mongoose/blob/master/CONTRIBUTING.md).\n\nIf your pull requests makes documentation changes, please do **not**\nmodify any `.html` files. The `.html` files are compiled code, so please make\nyour changes in `docs/*.pug`, `lib/*.js`, or `test/docs/*.js`.\n\nView all 400+ [contributors](https://github.com/Automattic/mongoose/graphs/contributors).\n\n## Installation\n\nFirst install [Node.js](http://nodejs.org/) and [MongoDB](https://www.mongodb.org/downloads). Then:\n\n```sh\n$ npm install mongoose\n```\n\n## Importing\n\n```javascript\n// Using Node.js `require()`\nconst mongoose = require('mongoose');\n\n// Using ES6 imports\nimport mongoose from 'mongoose';\n```\n\n## Mongoose for Enterprise\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of mongoose and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-mongoose?utm_source=npm-mongoose&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)\n\n## Overview\n\n### Connecting to MongoDB\n\nFirst, we need to define a connection. If your app uses only one database, you should use `mongoose.connect`. If you need to create additional connections, use `mongoose.createConnection`.\n\nBoth `connect` and `createConnection` take a `mongodb://` URI, or the parameters `host, database, port, options`.\n\n```js\nawait mongoose.connect('mongodb://localhost/my_database');\n```\n\nOnce connected, the `open` event is fired on the `Connection` instance. If you're using `mongoose.connect`, the `Connection` is `mongoose.connection`. Otherwise, `mongoose.createConnection` return value is a `Connection`.\n\n**Note:** _If the local connection fails then try using 127.0.0.1 instead of localhost. Sometimes issues may arise when the local hostname has been changed._\n\n**Important!** Mongoose buffers all the commands until it's connected to the database. This means that you don't have to wait until it connects to MongoDB in order to define models, run queries, etc.\n\n### Defining a Model\n\nModels are defined through the `Schema` interface.\n\n```js\nconst Schema = mongoose.Schema;\nconst ObjectId = Schema.ObjectId;\n\nconst BlogPost = new Schema({\n  author: ObjectId,\n  title: String,\n  body: String,\n  date: Date\n});\n```\n\nAside from defining the structure of your documents and the types of data you're storing, a Schema handles the definition of:\n\n* [Validators](http://mongoosejs.com/docs/validation.html) (async and sync)\n* [Defaults](http://mongoosejs.com/docs/api.html#schematype_SchemaType-default)\n* [Getters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-get)\n* [Setters](http://mongoosejs.com/docs/api.html#schematype_SchemaType-set)\n* [Indexes](http://mongoosejs.com/docs/guide.html#indexes)\n* [Middleware](http://mongoosejs.com/docs/middleware.html)\n* [Methods](http://mongoosejs.com/docs/guide.html#methods) definition\n* [Statics](http://mongoosejs.com/docs/guide.html#statics) definition\n* [Plugins](http://mongoosejs.com/docs/plugins.html)\n* [pseudo-JOINs](http://mongoosejs.com/docs/populate.html)\n\nThe following example shows some of these features:\n\n```js\nconst Comment = new Schema({\n  name: { type: String, default: 'hahaha' },\n  age: { type: Number, min: 18, index: true },\n  bio: { type: String, match: /[a-z]/ },\n  date: { type: Date, default: Date.now },\n  buff: Buffer\n});\n\n// a setter\nComment.path('name').set(function (v) {\n  return capitalize(v);\n});\n\n// middleware\nComment.pre('save', function (next) {\n  notify(this.get('email'));\n  next();\n});\n```\n\nTake a look at the example in [`examples/schema/schema.js`](https://github.com/Automattic/mongoose/blob/master/examples/schema/schema.js) for an end-to-end example of a typical setup.\n\n### Accessing a Model\n\nOnce we define a model through `mongoose.model('ModelName', mySchema)`, we can access it through the same function\n\n```js\nconst MyModel = mongoose.model('ModelName');\n```\n\nOr just do it all at once\n\n```js\nconst MyModel = mongoose.model('ModelName', mySchema);\n```\n\nThe first argument is the _singular_ name of the collection your model is for. **Mongoose automatically looks for the _plural_ version of your model name.** For example, if you use\n\n```js\nconst MyModel = mongoose.model('Ticket', mySchema);\n```\n\nThen `MyModel` will use the __tickets__ collection, not the __ticket__ collection. For more details read the [model docs](https://mongoosejs.com/docs/api/mongoose.html#mongoose_Mongoose-model).\n\nOnce we have our model, we can then instantiate it, and save it:\n\n```js\nconst instance = new MyModel();\ninstance.my.key = 'hello';\ninstance.save(function (err) {\n  //\n});\n```\n\nOr we can find documents from the same collection\n\n```js\nMyModel.find({}, function (err, docs) {\n  // docs.forEach\n});\n```\n\nYou can also `findOne`, `findById`, `update`, etc.\n\n```js\nconst instance = await MyModel.findOne({ ... });\nconsole.log(instance.my.key);  // 'hello'\n```\n\nFor more details check out [the docs](http://mongoosejs.com/docs/queries.html).\n\n**Important!** If you opened a separate connection using `mongoose.createConnection()` but attempt to access the model through `mongoose.model('ModelName')` it will not work as expected since it is not hooked up to an active db connection. In this case access your model through the connection you created:\n\n```js\nconst conn = mongoose.createConnection('your connection string');\nconst MyModel = conn.model('ModelName', schema);\nconst m = new MyModel;\nm.save(); // works\n```\n\nvs\n\n```js\nconst conn = mongoose.createConnection('your connection string');\nconst MyModel = mongoose.model('ModelName', schema);\nconst m = new MyModel;\nm.save(); // does not work b/c the default connection object was never connected\n```\n\n### Embedded Documents\n\nIn the first example snippet, we defined a key in the Schema that looks like:\n\n```\ncomments: [Comment]\n```\n\nWhere `Comment` is a `Schema` we created. This means that creating embedded documents is as simple as:\n\n```js\n// retrieve my model\nconst BlogPost = mongoose.model('BlogPost');\n\n// create a blog post\nconst post = new BlogPost();\n\n// create a comment\npost.comments.push({ title: 'My comment' });\n\npost.save(function (err) {\n  if (!err) console.log('Success!');\n});\n```\n\nThe same goes for removing them:\n\n```js\nBlogPost.findById(myId, function (err, post) {\n  if (!err) {\n    post.comments[0].remove();\n    post.save(function (err) {\n      // do something\n    });\n  }\n});\n```\n\nEmbedded documents enjoy all the same features as your models. Defaults, validators, middleware. Whenever an error occurs, it's bubbled to the `save()` error callback, so error handling is a snap!\n\n\n### Middleware\n\nSee the [docs](http://mongoosejs.com/docs/middleware.html) page.\n\n#### Intercepting and mutating method arguments\n\nYou can intercept method arguments via middleware.\n\nFor example, this would allow you to broadcast changes about your Documents every time someone `set`s a path in your Document to a new value:\n\n```js\nschema.pre('set', function (next, path, val, typel) {\n  // `this` is the current Document\n  this.emit('set', path, val);\n\n  // Pass control to the next pre\n  next();\n});\n```\n\nMoreover, you can mutate the incoming `method` arguments so that subsequent middleware see different values for those arguments. To do so, just pass the new values to `next`:\n\n```js\n.pre(method, function firstPre (next, methodArg1, methodArg2) {\n  // Mutate methodArg1\n  next(\"altered-\" + methodArg1.toString(), methodArg2);\n});\n\n// pre declaration is chainable\n.pre(method, function secondPre (next, methodArg1, methodArg2) {\n  console.log(methodArg1);\n  // => 'altered-originalValOfMethodArg1'\n\n  console.log(methodArg2);\n  // => 'originalValOfMethodArg2'\n\n  // Passing no arguments to `next` automatically passes along the current argument values\n  // i.e., the following `next()` is equivalent to `next(methodArg1, methodArg2)`\n  // and also equivalent to, with the example method arg\n  // values, `next('altered-originalValOfMethodArg1', 'originalValOfMethodArg2')`\n  next();\n});\n```\n\n#### Schema gotcha\n\n`type`, when used in a schema has special meaning within Mongoose. If your schema requires using `type` as a nested property you must use object notation:\n\n```js\nnew Schema({\n  broken: { type: Boolean },\n  asset: {\n    name: String,\n    type: String // uh oh, it broke. asset will be interpreted as String\n  }\n});\n\nnew Schema({\n  works: { type: Boolean },\n  asset: {\n    name: String,\n    type: { type: String } // works. asset is an object with a type property\n  }\n});\n```\n\n### Driver Access\n\nMongoose is built on top of the [official MongoDB Node.js driver](https://github.com/mongodb/node-mongodb-native). Each mongoose model keeps a reference to a [native MongoDB driver collection](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html). The collection object can be accessed using `YourModel.collection`. However, using the collection object directly bypasses all mongoose features, including hooks, validation, etc. The one\nnotable exception that `YourModel.collection` still buffers\ncommands. As such, `YourModel.collection.find()` will **not**\nreturn a cursor.\n\n## API Docs\n\nFind the API docs [here](http://mongoosejs.com/docs/api.html), generated using [dox](https://github.com/tj/dox)\nand [acquit](https://github.com/vkarpov15/acquit).\n\n## Related Projects\n\n#### MongoDB Runners\n\n- [run-rs](https://www.npmjs.com/package/run-rs)\n- [mongodb-memory-server](https://www.npmjs.com/package/mongodb-memory-server)\n- [mongodb-topology-manager](https://www.npmjs.com/package/mongodb-topology-manager)\n\n#### Unofficial CLIs\n\n- [mongoosejs-cli](https://www.npmjs.com/package/mongoosejs-cli)\n\n#### Data Seeding\n\n- [dookie](https://www.npmjs.com/package/dookie)\n- [seedgoose](https://www.npmjs.com/package/seedgoose)\n- [mongoose-data-seed](https://www.npmjs.com/package/mongoose-data-seed)\n\n#### Express Session Stores\n\n- [connect-mongodb-session](https://www.npmjs.com/package/connect-mongodb-session)\n- [connect-mongo](https://www.npmjs.com/package/connect-mongo)\n\n## License\n\nCopyright (c) 2010 LearnBoost &lt;dev@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "licenseText": "# MIT License\n\nCopyright (c) 2010-2013 LearnBoost <dev@learnboost.com>\nCopyright (c) 2013-2021 Automattic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/mongoose/-/mongoose-6.5.3.tgz#776f6c72f411d10cd131135f6b1fce14ebf7f706",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/mongoose/-/mongoose-6.5.3.tgz",
    "hash": "776f6c72f411d10cd131135f6b1fce14ebf7f706",
    "integrity": "sha512-0L2ZOPzNQ7kcIgpdfpmVXc+/SypdhzcTlaHXYa983u1lrVp7/i3ekwHpPiTXxYBvV6FwBAsFoHI7+Ovf8tp3Mg==",
    "registry": "npm",
    "packageName": "mongoose",
    "cacheIntegrity": "sha512-0L2ZOPzNQ7kcIgpdfpmVXc+/SypdhzcTlaHXYa983u1lrVp7/i3ekwHpPiTXxYBvV6FwBAsFoHI7+Ovf8tp3Mg== sha1-d29scvQR0QzRMRNfax/OFOv39wY="
  },
  "registry": "npm",
  "hash": "776f6c72f411d10cd131135f6b1fce14ebf7f706"
}