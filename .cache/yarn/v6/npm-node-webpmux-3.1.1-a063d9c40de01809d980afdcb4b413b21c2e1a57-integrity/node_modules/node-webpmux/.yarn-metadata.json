{
  "manifest": {
    "name": "node-webpmux",
    "version": "3.1.1",
    "description": "A pure Javascript/WebAssembly re-implementation of webpmux",
    "main": "webp.js",
    "scripts": {
      "test": "echo \"Error: no test specified\" && exit 1"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/ApeironTsuka/node-webpmux.git"
    },
    "author": {
      "name": "ApeironTsuka"
    },
    "license": "ISC",
    "bugs": {
      "url": "https://github.com/ApeironTsuka/node-webpmux/issues"
    },
    "homepage": "https://github.com/ApeironTsuka/node-webpmux#readme",
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-node-webpmux-3.1.1-a063d9c40de01809d980afdcb4b413b21c2e1a57-integrity/node_modules/node-webpmux/package.json",
    "readmeFilename": "README.md",
    "readme": "# node-webpmux\n\nA mostly-complete pure Javascript re-implementation of webpmux.<br />\nCan load \"simple\" lossy/lossless images as well as animations.\n\n### Install\n```npm install node-webpmux```\n\n### Basic usage\n```javascript\nconst WebP = require('node-webpmux');\nlet img = new WebP.Image();\n// Load an animation\nawait img.load('img.webp');\n// Extract the (unprocessed) fourth frame\nawait img.demux('.', { frame: 3 });\n// Replace the fourth frame with a new image from disk\nawait img.replaceFrame(3, 'different.webp'); // This preserves the existing frame settings\n// Alternatively you can do\n//   let frame = Image.generateFrame({ path: 'different.webp' });\n//   img.frames[3] = frame;\n// Which will completely replace the frame\n// Save a new copy\nawait img.save({ path: 'newimg.webp' });\n// Or alternatively, img.save() to save over the existing one\n```\n### Exports\n`TYPE_LOSSY`<br />\n`TYPE_LOSSLESS`<br />\n`TYPE_EXTENDED`<br />\nConstants for what type of image is loaded.\n\n`encodeResults`: enum of values that set[Image/Frame]Data returns.\n\n`Image`: The main class.\n\n### Class definition:\n\n#### Class properties\n\n##### `.width` (read-only)\nThe width of the loaded image.\n\n##### `.height` (read-only)\nThe height of the loaded image.\n\n##### `.type` (read-only)\nThe type of image from the TYPE_* constants table.\n\n##### `.hasAnim` (read-only)\nA boolean flag for easily checking if the image is an animation.\n\n##### `.hasAlpha` (read-only)\nA boolean flag for easily checking if the image has transparency in any way.\n\n##### `.frames` (read-only)\nReturns the array of frames, if any, or undefined.<br />\nNote that while the frames themselves are read/write, you shouldn't modify them.\n\n##### `.frameCount` (read-only)\nThe number of frames in the image's animation, or 0 if it's not an animation.\n\n##### `.anim` (read-only)\nDirect access to the raw animation data (see below in the _Layout for internal Image data_ section).\n\n##### `.iccp` (read/write)\nA Buffer containing the raw ICCP data stored in the image, or undefined if there isn't any.\n\n##### `.exif` (read/write)\nA Buffer containing the raw EXIF data stored in the image, or undefined if there isn't any.\n\n##### `.xmp` (read/write)\nA Buffer containing the raw XMP data stored in the image, or undefined if there isn't any.\n\n#### Image member functions\n\n##### `async .initLib()`\nCalls Image.initLib(). This member function is no longer particularly useful and is kept for convenience.\n\n##### `async .load(source)`\nIf `source` is a string, it tries to load that as a path to a WebP image.<br />\nIf `source` is a buffer, it tries to load the contents of the buffer as a WebP image.\n\n##### `.convertToAnim()`\nSets the image up for being an animation.\n\n##### `async .demux({ path = undefined, buffers = false, frame = -1, prefix = '#FNAME#', start = 0, end = 0 })`\nDump the individual, unprocessed WebP frames to a directory.\n* `path`: The directory to dump the frames to, if desired.\n* `buffers`: Return the frames as an array of Buffers instead of dumping to a path.\n* `prefix`: What to prefix the frame names with. Default is the file name of the original image (without .webp).\n    Format is \\<prefix\\>_\\<frame number\\>.webp.\n* `frame`: What frame to dump. Defaults to -1, which has it dump all available frames. Overrides `start`/`end`.\n* `start`: The first frame to dump. Defaults to the first frame.\n* `end`: The last frame to dump. Defaults to the last frame.\n\n##### `async .replaceFrame(frame, source)`\nReplaces a frame in the animation with another image from `source`. All other frame settings are preserved.\n* `frame`: Which frame to replace. Frame indexes are 0-based.\n* `source`: If this is a string, the frame is loaded from disk. If this is a Buffer, the frame is loaded from there.\n\n##### `async .save(path = this.path, options)`\nSave the image to `path`. Options are described below in the _Options for saving_ section.<br />\nIf `path` is `null`, this will save the image to a Buffer and return it.\n\n##### `async .getImageData()`\nGet the raw RGBA pixel data for the image.<br />\nReturns a Buffer in the format `[ r, g, b, a, r, g, b, a, ... ]`. Values are range 0 - 255.<br />\nUse this for non-animations.<br />\nOn error, this returns a Buffer full of 0s.\n\n##### `async .setImageData(buf, { width = 0, height = 0, preset = 0, quality = 75, exact = false, lossless = 0, method = 4, advanced = undefined })`\nEncode `buf` as a new WebP using the provided settings and replace the image pixel data with it.<br />\nThis preserves EXIF/ICCP/XMP if present.<br />\nUse this for non-animations.<br />\nOptions:\n* `width`/`height`<br />\n    If either are > 0, override the existing width and/or height with this value.<br />\n    Use this if the pixel data in `buf` has different dimensions than the original image.\n* `preset`: What image preset to use, if any.<br />\n    Range is 0 - 5<br />\n    Default is 0 (DEFAULT).<br />\n    An enum of constants can be found under WebP.presets\n* `quality`: What quality to set.<br />\n    Range is 0 - 100.<br />\n    Default is 75.\n* `exact`: Preserve data in transparent pixels.<br />\n    Defaults to `false`, which means transparent pixels may be modified to help with compression.\n* `lossless`: Save the data as a lossy/lossless image.<br />\n    Range is 0 - 9.<br />\n    Default is 0 (lossy).<br />\n    Higher values will result in smaller files, but requires more processing time.\n* `method`: Compression method to use.<br />\n    Range is 0 - 6.<br />\n    Default is 4.<br />\n    Higher values will result in smaller files, but requires more processing time.\n* `advanced`: Access to more advanced encoding settings offered by libwebp<br />\n* * `imageHint`: Hint for what type of image it is (only used for lossless encoding for now, according to libwebp spec).<br />\n      Range is 0 - 3.<br />\n      Default is 0 (DEFAULT).<br />\n      An enum of constants can be found under WebP.hints\n* * `targetSize`: Specifies the desired target size in bytes.<br />\n      Default is 0 (no target).<br />\n      Takes precedence over the `method` parameter.\n* * `targetPSNR`: Specifies the minimum distortion to try to achieve.<br />\n      Default is 0 (no target).<br />\n      Takes precedence over the `targetSize` parameter.\n* * `segments`: Maximum number of segments to use.<br />\n      Range is 1 - 4.<br />\n      Default is 4.\n* * `snsStrength`: Spacial Noise Shaping.<br />\n      Range is 0 - 100.<br />\n      Default is 50.\n* * `filterStrength`<br />\n      Range is 0 - 100.<br />\n      Default is 0 (off).\n* * `filterSharpness`<br />\n      Range is 0 - 7, with 7 being the least sharp.<br />\n      Default is 0 (off).\n* * `filterType`<br />\n      Range is 0 - 1.<br />\n      Default is 1.<br />\n      0 is simple; 1 is strong.<br />\n      Only used if `filterStrength` > 0 or `autoFilter` > 0.\n* * `autoFilter`: Auto-adjust the filter's strength.<br />\n      Range is 0 - 1.<br />\n      Default is 0 (off).\n* * `alphaCompression`: Algorithm for encoding the alpha plane.<br />\n      Range is 0 - 1.<br />\n      Default is 1 (Lossless).<br />\n      0 is off; 1 is lossless.\n* * `alphaFiltering`: Predictive filtering method for alpha place.<br />\n      Range is 0 - 2.<br />\n      Default is 1 (Fast).<br />\n      0 is none; 1 is fast; 2 is best\n* * `alphaQuality`<br />\n      Range is 0 - 100.<br />\n      Default is 100.\n* * `pass`: Number of entropy-analysis passes.<br />\n      Range is 1 - 10.<br />\n      Default is 1.\n* * `showCompressed`: Export the compressed picture back.<br />\n      Range is 0 - 1.<br />\n      Default is 0 (don't).<br />\n      In-loop filtering is not applied.\n* * `preprocessing`: Preprocessing filter.<br />\n      Range is 0 - 2.<br />\n      Default is 0 (None).<br />\n      0 is none; 1 is segment-smooth; 2 is pseudo-random dithering.\n* * `partitions`: log2(number of token partitions).<br />\n      Range is 0 - 3.<br />\n      Default is 0.<br />\n      Higher values result in harder progressive decoding.\n* * `partitionLimit`: Quality degredation allowed to fit the 512k limit on prediction modes coding.<br />\n      Range is 0 - 100.<br />\n      Default is 0.\n* * `emulateJpegSize`: Compression parameters are remapped to better mat the expected output size from JPEG compression.<br />\n      Range is 0 - 1.<br />\n      Default is 0 (Off).<br />\n      Generally, the output size will be smaller but the degredation will be lower.\n* * `threadLevel`: Try to use multi-threaded encoding.<br />\n      Default is 0 (Off).<br />\n      NOTE: Currently the WebAssembly is NOT compiled with support for threads, so this option does nothing.<br />\n      NodeJS doesn't support threads in WebAssembly without an experimental flag, and my testing with it didn't appear to use threads regardless.\n* * `lowMemory`: Reduce memory usage but increase CPU use.<br />\n      Range is 0 - 1.<br />\n      Default is 0 (Off).\n* * `nearLossless`: Near lossless encoding.<br />\n      Range is 0 - 100.<br />\n      Default is 100 (off).<br />\n      0 is max loss, 100 is off.\n* * `useDeltaPalette`: Reserved for future lossless feature.<br />\n      Range is 0 - 0.<br />\n      Default is 0 (Off).<br />\n      Setting this will do nothing, as it's forced back to 0.\n* * `useSharpYUV`: Use sharp (and slow) RGB->YUV conversion.<br />\n      Range is 0 - 1.<br />\n      Default is 0 (Off).\n* * `qMin`: Minimum permissible quality factor.<br />\n      Range is 0 - 100.<br />\n      Default is 0.\n* * `qMax`: Maximum permissible quality factor.<br />\n      Range is 0 - 100.<br />\n      Default is 100.\n\nIf `lossless` is set above 0, then setting `quality` or `method` is discouraged as they will override settings in the lossless preset.<br />\nReturn value can be checked against the values in `WebP.encodeResults`.\n\n##### `async .getFrameData(frame)`\nGet the raw RGBA pixel data for a specific frame.<br />\nUse this for animations.<br />\nOtherwise identical to `.getImageData()`.\n\n##### `async .setFrameData(frame, buffer, { width = 0, height = 0, preset = 0, quality = 75, exact = false, lossless = 0, method = 4, advanced = undefined })`\nEncode `buffer` as a new WebP using the provided settings and replace an existing frame's pixel data with it.<br />\nUse this for animations.<br />\nOtherwise identical to `.setImageData()`.\n\n#### Static functions\n\n##### `async Image.initLib()`\nInitialize the internal library used for [get/set]ImageData and [get/set]FrameData described above.<br />\nThere is no need to call this unless you plan to use one of those 4 functions.\n\n##### `async Image.save(path, options)`\nSave the `options` using `Image.getEmptyImage()`.<br />\nWorks the same as `.save()` otherwise.<br />\nCan be used to create an animation from scratch by passing `frames` in `options`.<br />\n&ensp; Example: `Image.save('animation.webp', { frames: ... })` for saving to file\n&ensp; OR\n&ensp; Example: `Image.save(null, { frames: ... })` for saving to Buffer\n\n##### `async Image.getEmptyImage(ext)`\nReturns a basic, lossy 1x1 black image with no alpha or metadata.<br />\nUseful if you need to create a WebP from scratch, such as when converting from PNG.<br />\n`.setImageData()` would be used to change the canvas size/contents.<br />\nSet `ext` to `true` to force the image to be an extended type, if desired. This is mainly for use internally.\n\n##### `async Image.generateFrame({ path = undefined, buffer = undefined, img = undefined, x = undefined, y = undefined, delay = undefined, blend = undefined, dispose = undefined })`\nGenerates enough of an `anmf` structure to be placed in `.frames`.<br />\nNote that, at the moment, only *static* images are supported in this function.\n* `path`/`buffer`/`img`\n    Only one of these can be present.\n    `path` will load image data from file.\n    `buffer` will load from the buffer.\n    `img` will use an existing Image instance.\n* `x`/`y`/`delay`/`blend`/`dispose`\n    Explicitly set these properties. See the _Options for saving_ section for what these do.\n\n### Options for saving\n#### These options affect both static images and animations\n*   `exif`/`iccp`/`xmp`<br />\n      Save or override EXIF/ICCP/XMP chunks.<br />\n      Pass `true` to save the existing ones, or pass a Buffer to replace them.<br />\n      Note that there is no verification whatsoever that the data passed is valid.\n\n####  The options below are only used when saving an animation:\n*   `width`/`height`: Width/height of the image.<br />\n      Range 0 - 16777216.<br />\n      The product of width*height must NOT exceed (2 ** 32) - 1.<br />\n      Passing 0 to either flags it for being set automatically.\n*   `bgColor`: The background color of the animation.<br />\n      Format is [ r, g, b, a ].<br />\n      Defaults to [ 255, 255, 255, 255 ].\n*   `loops`: Number of times the animation loops.<br />\n      Range is 0 - 65535, with 0 being an infinite loop.<br />\n      Default is 0.\n*   `x`/`y`/`delay`/`blend`/`dispose`: Changes the default frame x/y position where a frame omits it (see below).\n* *   `x`/`y` defaults to 0.\n* *   `delay` defaults to 100.\n* *   `blend` defaults to `true`.\n* *   `dispose` defaults to `false`.\n* *   `frames`: An array of objects defining each frame of the animation with the following properties.\n* * *  `x`/`y`: x, y offset to place the frame within the animation.<br />\n        Range 0 - 16777215.<br />\n        Default is 0,0 (defined above).\n* * *  `delay`: Length of this frame in miliseconds.<br />\n        Range 0 - 16777215.<br />\n        Default is 100 (defined above).<br />\n        According to the documentation, delays <= 10ms are WebP implementation defined, and many tools/browsers/etc assign their own minimum-allowed delay.\n* * *  `blend`: Boolean flag for whether or not to use alpha blending when drawing the frame.<br />\n        Default is `true` (defined above).\n* * *  `dispose`: Boolean flag to control frame disposal method.<br />\n        `true` causes the background color to be drawn under the frame.<br />\n        `false` draws the new frame directly.<br />\n        Default is `false` (defined above).\n\n### Information about the internal library\n\n[get/set]ImageData and [get/set]FrameData are powered by Google's official libwebp library obtained from the [GitHub mirror](https://github.com/webmproject/libwebp).<br />\nCommit 8ea81561 was the latest at the time of compilation.<br />\nThis library was compiled with Emscripten with the command `emcc -O3 -s WASM=1 -s MODULARIZE -s EXTRA_EXPORTED_RUNTIME_METHODS='[cwrap]' -s ALLOW_MEMORY_GROWTH=1  -I libwebp binding.cpp libwebp/src/{dec,dsp,demux,enc,mux,utils}/*.c --bind -o libwebp.js`.<br />\nbinding.cpp is a shim I wrote to bridge the needed parts together and can be found in the libwebp/ directory.\nlibwebp.mjs, found in the root, is the Javascript interface to it.\n\nAt present, the only options for encoding are setting the lossless preset, quality, method, and exact flag.<br />\nIf access to other options is desired (see upstream libwebp/src/webp/encode.h, struct WebPConfig for settings), leave a feature request and I'll add it.<br />\nThe upstream command line tool `cwebp` can be used to play with the features and see what you find useful.\n\n### Layout for internal Image data\n```javascript\n{\n  path, // The path loaded.\n  loaded, // Boolean flag for if this object has an image loaded.\n  data: { // The loaded data.\n    type, // The type of image from the constants table.\n    vp8: { // The lossy format image. Only if .type is TYPE_LOSSY or TYPE_EXTENDED.\n      raw, // The raw, compressed image data from the VP8 chunk.\n      width, height // The width/height, extracted from the VP8 image data.\n    },\n    vp8l: { // The lossless format image. Only if .type is TYPE_LOSSLESS or TYPE_EXTENDED.\n      raw, // The raw, compressed image data from the VP8L chunk.\n      alpha, // A flag for if this image has alpha data, extracted from the VP8L image data.\n      width, height // The width/height, extracted from the VP8L image data.\n    },\n    extended: { // Only if .type is TYPE_EXTENDED.\n      raw, // The raw data for the VP8X chunk.\n      hasICCP, // Flag for if there's an ICC profile chunk defined.\n      hasAlpha, // Flag for if any image/frame defined has alpha data.\n      hasEXIF, // Flag for if there's an EXIF chunk defined.\n      hasXMP, // Flag for if there's an XMP chunk defined.\n      hasAnim, // Flag for if this image has an animation defined.\n      width, height // Width/height of the image.\n    },\n    anim: {\n      raw, // A Buffer containing the raw data for the ANIM chunk. Mainly for internal use.\n      bgColor, // The background color in [ r, g, b, a ] format.\n      loops, // The loop count.\n      frames: [ // Array of frames\n        { // The frame object definition\n          raw, // The raw data for the ANMF chunk. Mainly for internal use.\n          type, // The type of image this frame is, from the constants table.\n          x, y, // The frame's x, y position.\n          width, height, // The frame's width and height.\n          delay, // The duration of the frame.\n          blend, dispose, // The frame's blend/dispose flags.\n          // Additionally, one or more of the following.\n          vp8, // The raw, compressed WebP data for a lossy image. If present, there will be no `vp8l`.\n          vp8l, // The raw, compressed WebP data for a lossless image. If present, there will be no `vp8` or `alph`.\n          alph // The raw, compressed WebP data for an alpha map. Might be present if the image is lossy.\n        },\n        ...\n      ]\n    },\n    alph: {\n      raw // The raw alpha map chunk. Only likely to be here if .vp8 is also defined and .type is TYPE_EXTENDED.\n    },\n    iccp: {\n      raw // The raw ICCP chunk, if defined.\n    },\n    exif: {\n      raw // The raw EXIF chunk, if defined.\n    },\n    xmp: {\n      raw // The raw XMP chunk, if defined.\n    }\n  }\n}\n```\n### Breaking changes from 1.x\nImage.muxAnim and .muxAnim were merged into Image.save and .save respectively.\n* Replace `Image.muxAnim({ path, frames, width, height, bgColor, loops, delay, x, y, blend, dispose, exif, iccp, xmp })`\n* With `Image.save(path, undefined, { frames, width, height, bgColor, loops, delay, x, y, blend, dispose, exif, iccp, xmp })`\n<br /><br />\n* Replace `.muxAnim({ path, width, height, bgColor, loops, delay, x, y, blend, dispose, exif, iccp, xmp })`\n* With `.save(path, { width, height, bgColor, loops, delay, x, y, blend, dispose, exif, iccp, xmp })`\n\n`.anim.backgroundColor` renamed to `.anim.bgColor` for brevity and consisteny.<br />\n`.anim.loopCount` renamed to `.anim.loop` for consistency.<br />\n`.anim.frameCount` and `.frameCount` were removed. Should use `.anim.frames.length` and `.frames.length` respectively instead.<br />\n`.demuxAnim()` was renamed to `.demux()`\n\n## Breaking changes from 2.0.0 to 2.0.1\nImage.generateFrame()'s `duration` input renamed to `delay`<br />\n\n## Breaking changes from 2.x to 3.0.0\nFile and buffer codepaths have been merged.\n* Replace `.loadBuffer(buffer)`\n* With `.load(buffer)`\n* Replace `Image.loadBuffer(buffer)`\n* With `Image.load(buffer)`\n<br /><br />\n* Replace `.saveBuffer(settings)`\n* With `.save(null, settings)`\n* Replace `Image.saveBuffer(settings)`\n* With `Image.save(null, settings)`\n* Note that it's specifically `null` here. This is because the default behavior of .save() is still saving to the path it was loaded from.\n<br /><br />\n* Replace `.demuxToBuffers({ setting, setting, ... })`\n* With `.demux({ buffers: true, setting, setting, ... })`\n* Replace `.demux(path, settings)`\n* With `.demux({ path, setting, setting, ... })`\n<br /><br />\n* Replace `.replaceFrameBuffer(frame, buffer)`\n* With `.replaceFrame(frame, buffer)`\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/node-webpmux/-/node-webpmux-3.1.1.tgz#a063d9c40de01809d980afdcb4b413b21c2e1a57",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/node-webpmux/-/node-webpmux-3.1.1.tgz",
    "hash": "a063d9c40de01809d980afdcb4b413b21c2e1a57",
    "integrity": "sha512-vG75BAe9zKghN+Y+XsJMPdOfVyesn1MmGvd/DMxeQ6gtpB3U053yCWXO1Gl2QWXTfU1++7flTihv/yB6EEdtKQ==",
    "registry": "npm",
    "packageName": "node-webpmux",
    "cacheIntegrity": "sha512-vG75BAe9zKghN+Y+XsJMPdOfVyesn1MmGvd/DMxeQ6gtpB3U053yCWXO1Gl2QWXTfU1++7flTihv/yB6EEdtKQ== sha1-oGPZxA3gGAnZgK/ctLQTshwuGlc="
  },
  "registry": "npm",
  "hash": "a063d9c40de01809d980afdcb4b413b21c2e1a57"
}