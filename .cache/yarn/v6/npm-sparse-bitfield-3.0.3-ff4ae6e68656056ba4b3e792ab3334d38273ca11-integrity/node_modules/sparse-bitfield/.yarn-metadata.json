{
  "manifest": {
    "name": "sparse-bitfield",
    "version": "3.0.3",
    "description": "Bitfield that allocates a series of small buffers to support sparse bits without allocating a massive buffer",
    "main": "index.js",
    "dependencies": {
      "memory-pager": "^1.0.2"
    },
    "devDependencies": {
      "buffer-alloc": "^1.1.0",
      "standard": "^9.0.0",
      "tape": "^4.6.3"
    },
    "scripts": {
      "test": "standard && tape test.js"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/mafintosh/sparse-bitfield.git"
    },
    "author": {
      "name": "Mathias Buus",
      "url": "@mafintosh"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/mafintosh/sparse-bitfield/issues"
    },
    "homepage": "https://github.com/mafintosh/sparse-bitfield",
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-sparse-bitfield-3.0.3-ff4ae6e68656056ba4b3e792ab3334d38273ca11-integrity/node_modules/sparse-bitfield/package.json",
    "readmeFilename": "README.md",
    "readme": "# sparse-bitfield\n\nBitfield implementation that allocates a series of 1kb buffers to support sparse bitfields\nwithout allocating a massive buffer. If you want to simple implementation of a flat bitfield\nsee the [bitfield](https://github.com/fb55/bitfield) module.\n\nThis module is mostly useful if you need a big bitfield where you won't nessecarily set every bit.\n\n```\nnpm install sparse-bitfield\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/sparse-bitfield.svg?style=flat)](http://travis-ci.org/mafintosh/sparse-bitfield)\n\n## Usage\n\n``` js\nvar bitfield = require('sparse-bitfield')\nvar bits = bitfield()\n\nbits.set(0, true) // set first bit\nbits.set(1, true) // set second bit\nbits.set(1000000000000, true) // set the 1.000.000.000.000th bit\n```\n\nRunning the above example will allocate two 1kb buffers internally.\nEach 1kb buffer can hold information about 8192 bits so the first one will be used to store information about the first two bits and the second will be used to store the 1.000.000.000.000th bit.\n\n## API\n\n#### `var bits = bitfield([options])`\n\nCreate a new bitfield. Options include\n\n``` js\n{\n  pageSize: 1024, // how big should the partial buffers be\n  buffer: anExistingBitfield,\n  trackUpdates: false // track when pages are being updated in the pager\n}\n```\n\n#### `bits.set(index, value)`\n\nSet a bit to true or false.\n\n#### `bits.get(index)`\n\nGet the value of a bit.\n\n#### `bits.pages`\n\nA [memory-pager](https://github.com/mafintosh/memory-pager) instance that is managing the underlying memory.\nIf you set `trackUpdates` to true in the constructor you can use `.lastUpdate()` on this instance to get the last updated memory page.\n\n#### `var buffer = bits.toBuffer()`\n\nGet a single buffer representing the entire bitfield.\n\n## License\n\nMIT\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 Mathias Buus\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz#ff4ae6e68656056ba4b3e792ab3334d38273ca11",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz",
    "hash": "ff4ae6e68656056ba4b3e792ab3334d38273ca11",
    "integrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==",
    "registry": "npm",
    "packageName": "sparse-bitfield",
    "cacheIntegrity": "sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ== sha1-/0rm5oZWBWuks+eSqzM004JzyhE="
  },
  "registry": "npm",
  "hash": "ff4ae6e68656056ba4b3e792ab3334d38273ca11"
}