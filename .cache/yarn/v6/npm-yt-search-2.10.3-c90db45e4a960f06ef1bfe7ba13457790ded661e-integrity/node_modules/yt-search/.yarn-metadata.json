{
  "manifest": {
    "name": "yt-search",
    "version": "2.10.3",
    "description": "search youtube",
    "main": "dist/yt-search.js",
    "bin": {
      "yt-search": "bin/cli.js",
      "yt-search-video": "bin/mpv_video.sh",
      "yt-search-audio": "bin/mpv_audio.sh"
    },
    "files": [
      "bin/**.*",
      "dist/yt-search.js"
    ],
    "scripts": {
      "debug": "debug=1 node src/index.js --silent",
      "build": "npm run build:src",
      "build:src": "browserify --node --no-bundle-external --standalone ytSearch -t [ babelify --presets [ @babel/preset-env ] ] src/index.js -o dist/yt-search.js 2>&1 | wooster",
      "prepublishOnly": "npm test",
      "test:production": "node test/test.js | faucet",
      "test:util": "node test/test-get-scripts.js",
      "test:dev": "cross-env debug=1 test_yt_search=1 node test/test.js",
      "test": "npm run test:util && npm run build && npm run test:production"
    },
    "author": {
      "name": "talmobi",
      "email": "talmo.christian@gmail.com"
    },
    "license": "MIT",
    "private": false,
    "repository": {
      "type": "git",
      "url": "https://github.com/talmobi/yt-search"
    },
    "bugs": {
      "url": "https://github.com/talmobi/yt-search/issues",
      "email": "talmo.christian@gmail.com"
    },
    "dependencies": {
      "async.parallellimit": "~0.5.2",
      "boolstring": "~1.0.2",
      "cheerio": "^1.0.0-rc.10",
      "dasu": "~0.4.3",
      "human-time": "0.0.2",
      "jsonpath-plus": "~5.0.2",
      "minimist": "~1.2.5",
      "node-fzf": "~0.5.1"
    },
    "devDependencies": {
      "@babel/core": "~7.11.4",
      "@babel/preset-env": "~7.11.0",
      "@talmobi/faucet": "0.0.3",
      "babelify": "~10.0.0",
      "browserify": "~17.0.0",
      "cross-env": "~7.0.2",
      "looks-same-plus": "0.0.2",
      "spacestandard": "~0.3.0",
      "tape": "~5.0.1",
      "wooster": "~0.5.0"
    },
    "_registry": "npm",
    "_loc": "/data/data/com.termux/files/home/.cache/yarn/v6/npm-yt-search-2.10.3-c90db45e4a960f06ef1bfe7ba13457790ded661e-integrity/node_modules/yt-search/package.json",
    "readmeFilename": "README.md",
    "readme": "[![npm](https://img.shields.io/npm/v/yt-search.svg?maxAge=3600)](https://www.npmjs.com/package/yt-search)\n[![npm](https://img.shields.io/npm/dm/yt-search.svg?maxAge=3600)](https://www.npmjs.com/package/yt-search)\n[![npm](https://img.shields.io/npm/l/yt-search.svg?maxAge=3600)](https://www.npmjs.com/package/yt-search)\n![mac](https://github.com/talmobi/yt-search/workflows/mac/badge.svg)\n![ubuntu](https://github.com/talmobi/yt-search/workflows/ubuntu/badge.svg)\n![windows](https://github.com/talmobi/yt-search/workflows/windows/badge.svg)\n\n#  yt-search\nsimple youtube search API and CLI\n\n![](https://thumbs.gfycat.com/ContentShockingCuttlefish-size_restricted.gif)\n\n## Installation\n```bash\nnpm install yt-search # local module usage\n```\n\n## Easy to use\n```javascript\nconst yts = require( 'yt-search' )\nconst r = await yts( 'superman theme' )\n\nconst videos = r.videos.slice( 0, 3 )\nvideos.forEach( function ( v ) {\n\tconst views = String( v.views ).padStart( 10, ' ' )\n\tconsole.log( `${ views } | ${ v.title } (${ v.timestamp }) | ${ v.author.name }` )\n} )\n```\n\n###### output\n```javascript\n  38878009 | Superman Theme (4:13) | Super Man\n   8861479 | Superman • Main Theme • John Williams (4:26) | HD Film Tributes\n   7802473 | Superman - Main Theme (BBC Proms) (4:46) | brassbone player\n```\n\n###### try it\nhttps://runkit.com/talmobi/runkit-npm-yt-search-basic\n\n#### single video\n```javascript\nconst video = await yts( { videoId: '_4Vt0UGwmgQ' } )\nconsole.log( video.title + ` (${ video.duration.timestamp })` )\n```\n###### output\n```javascript\nPhilip Glass. -  Koyaanisqatsi (original version) (3:29)\n```\n\n###### try it\nhttps://runkit.com/talmobi/runkit-npm-yt-search-video\n\n#### single playlist\n```javascript\nconst list = await yts( { listId: 'PL7k0JFoxwvTbKL8kjGI_CaV31QxCGf1vJ' } )\n\nconsole.log( 'playlist title: ' + list.title )\nlist.videos.forEach( function ( video ) {\n\tconsole.log( video.title )\n} )\n```\n###### output\n```javascript\nplaylist title: Superman Themes\nThe Max Fleischer Cartoon (From \"Superman\")\n[Deleted video]\nSuperman Theme\n[Private video]\nSuperman The Animated Series Full Theme\nSmallville theme song\nReprise / Fly Away\nSuperman Doomsday Soundtrack- Main Title\nHans Zimmer - Man of Steel Theme\nSupergirl CW Soundtrack - Superman Theme Extended\n```\n\n###### try it\nhttps://runkit.com/talmobi/runkit-npm-yt-search-playlist\n\n## CLI Usage (interactive)\n```bash\nyt-search superman theme\n```\n\nIf you have `mpv` installed, yt-search can directly play yt videos (or audio only)\n```bash\nyt-search-video Dank Memes Videos\nyt-search-audio Wagner\n```\n\nIf you don't have `mpv` installed, you can alternatively try installing `yt-play-cli`\n```bash\nnpm install -g yt-play-cli\n```\n\nsee: https://github.com/talmobi/yt-play\n\n\n## About\nSimple function to get youtube search results.\n\n## Why\nNot sure..\n\n## How\nUsing HTTP requests and parsing the results with [cheerio](https://github.com/cheeriojs/cheerio).\n\nCLI interactive mode with [node-fzf](https://github.com/talmobi/node-fzf)\n\n## Options\n```bash\nvar opts = { query: 'superman theme' }\nyts( opts, function ( err, r ) {\n\tif ( err ) throw err\n\tconsole.log( r.videos ) // video results\n\tconsole.log( r.playlists ) // playlist results\n\tconsole.log( r.channels ) // channel results\n\tconsole.log( r.live ) // live stream results\n} )\n\nvar opts = { videoId: 'e9vrfEoc8_g' }\nyts( opts, function ( err, video ) {\n\tif ( err ) throw err\n\tconsole.log( video ) // single video metadata\n} )\n\nvar opts = { listId: 'PL7k0JFoxwvTbKL8kjGI_CaV31QxCGf1vJ' }\nyts( opts, function ( err, playlist ) {\n\tif ( err ) throw err\n\tconsole.log( playlist ) // single playlist metadata\n\tconsole.log( playlist.videos ) // playlist videos\n} )\n```\n\n## Alternatives\n[ytsr](https://www.npmjs.com/package/ytsr)\n\n## Test\n```\nnpm test\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/yt-search/-/yt-search-2.10.3.tgz#c90db45e4a960f06ef1bfe7ba13457790ded661e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/yt-search/-/yt-search-2.10.3.tgz",
    "hash": "c90db45e4a960f06ef1bfe7ba13457790ded661e",
    "integrity": "sha512-msITxMhn+1f3RIlS2R0d5/275grX0nUgaD570Fap3gvPmwfvR9w31JG8B9++4Xtm6BLAzhdITK7kAWRInef8QQ==",
    "registry": "npm",
    "packageName": "yt-search",
    "cacheIntegrity": "sha512-msITxMhn+1f3RIlS2R0d5/275grX0nUgaD570Fap3gvPmwfvR9w31JG8B9++4Xtm6BLAzhdITK7kAWRInef8QQ== sha1-yQ20XkqWDwbvG/57oTRXeQ3tZh4="
  },
  "registry": "npm",
  "hash": "c90db45e4a960f06ef1bfe7ba13457790ded661e"
}